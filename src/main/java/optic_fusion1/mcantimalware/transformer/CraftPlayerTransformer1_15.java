package optic_fusion1.mcantimalware.transformer;

import java.util.Collection;
import me.yamakaja.runtimetransformer.annotation.Inject;
import me.yamakaja.runtimetransformer.annotation.InjectionType;
import me.yamakaja.runtimetransformer.annotation.Transform;
import net.minecraft.server.v1_15_R1.EntityPlayer;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import org.bukkit.craftbukkit.v1_15_R1.entity.CraftPlayer;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;
import org.bukkit.Effect;
import org.bukkit.GameMode;
import org.bukkit.Instrument;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Note;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.block.data.BlockData;
import org.bukkit.craftbukkit.v1_15_R1.CraftServer;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;

@Transform(CraftPlayer.class)
public class CraftPlayerTransformer1_15 extends CraftPlayer {

  public CraftPlayerTransformer1_15(CraftServer server, EntityPlayer entity) {
    super(server, entity);
  }

  @Override
  public void sendPluginMessage(Plugin source, String channel, byte[] message) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Override
  public void sendMessage(String[] messages) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void setGameMode(GameMode mode) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to set {1}'s gamemode to {2}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), mode.toString()});
      }
    }
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void setHealth(double health) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to set {1}'s heath to {2}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), health});
      }
    }
  }

  @Inject(InjectionType.INSERT)
  @Override
  public boolean addPotionEffects(Collection<PotionEffect> effects) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried giving {1} potion effects to {2}",
         new Object[]{callerInfo.getPlugin().getJar(), effects.size(), getDisplayName()});
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public boolean addPotionEffect(PotionEffect effect, boolean force) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried giving {1} a potion effect Amplifier: {2} Duration: {3} Type: {4}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), effect.getAmplifier(), effect.getDuration(), effect.getType().getName()});
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public boolean addPotionEffect(PotionEffect effect) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried giving {1} a potion effect Amplifier: {2} Duration: {3} Type: {4}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), effect.getAmplifier(), effect.getDuration(), effect.getType().getName()});
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void kickPlayer(String message) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried kicking {1} for the reason {2}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), message});
      }
    }
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void setOp(boolean value) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        String message = value ? "opping {1}" : "deopping {1}";
        throw new FormattedSecurityException("{0} tried " + message,
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName()});
      }
    }
  }

  @Inject(InjectionType.INSERT)
  @Override
  public boolean performCommand(String command) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} Player: {1} tried performing the command {2}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), command});
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void chat(String msg) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} Player: {1} tried sending the message {2}",
         new Object[]{callerInfo.getPlugin().getJar(), getDisplayName(), msg});
      }
    }
  }

  @Inject(InjectionType.INSERT)
  @Override
  public <T> void playEffect(Location loc, Effect effect, T data) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playEffect(Location loc, Effect effect, int data) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playSound(Location loc, String sound, SoundCategory category, float volume, float pitch) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playSound(Location loc, Sound sound, SoundCategory category, float volume, float pitch) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playSound(Location loc, String sound, float volume, float pitch) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playSound(Location loc, Sound sound, float volume, float pitch) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playNote(Location loc, Instrument instrument, Note note) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void playNote(Location loc, byte instrument, byte note) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public boolean sendChunkChange(Location loc, int sx, int sy, int sz, byte[] data) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void sendBlockChange(Location loc, BlockData block) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

  @Inject(InjectionType.INSERT)
  @Override
  public void sendBlockChange(Location loc, Material material, byte data) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    throw null;
  }

}
