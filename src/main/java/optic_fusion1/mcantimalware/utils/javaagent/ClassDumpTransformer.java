package optic_fusion1.mcantimalware.utils.javaagent;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public class ClassDumpTransformer implements ClassFileTransformer {

  static {
    File f = new File("AntiMalware/classpath");
    if (!f.exists()) {
      f.mkdirs();
    }
  }

  private static final CustomLogger LOGGER = AntiMalware.getLogger();
  private static final boolean SHOULD_EXCEPTIONS_BE_LOGGED = AntiMalware.getCommandLineHandler().shouldExceptionsBeLogged();

  @Override
  public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, 
   ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
    if (className != null) {
      LOGGER.info("Dumping: " + className);
      String newName = className.replaceAll("/", "#") + ".class";
      try {
        FileOutputStream fos = new FileOutputStream("AntiMalware/classpath/" + newName);
        fos.write(classfileBuffer);
        fos.close();
      } catch (IOException ex) {
        if (SHOULD_EXCEPTIONS_BE_LOGGED) {
          LOGGER.exception(ex);
        }
      }
    }
    // We are not modifying the bytecode in anyway, so return it as-is
    return classfileBuffer;
  }
}
