package optic_fusion1.mcantimalware.realtimescanning;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.CommandLineHandler;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.translations.TranslationFile;

public class RealTimeScanner {

    private static final CustomLogger LOGGER = AntiMalware.getMain().getLogger();
    private final Main main;
    private final Scanner scanner;
    private File scanDirectory = new File("plugins");
    private final TranslationFile translations;
    private static final CommandLineHandler COMMAND_LINE_HANDLER = AntiMalware.getCommandLineHandler();
    private static final boolean SHOULD_DEBUG_MESSAGES_BE_LOGGED = COMMAND_LINE_HANDLER.shouldDebugMessagesBeLogged();

    public RealTimeScanner(Main main) {
        this.main = main;
        translations = main.getTranslations();
        scanner = new Scanner(main);
        if (!COMMAND_LINE_HANDLER.shouldScanSingleFile()) {
            scanner.setScanDirectory(COMMAND_LINE_HANDLER.getScanDirectory());
        }
    }

    public void setupDirectoryWatcher() {
        DirectoryWatcher directoryWatcher = new DirectoryWatcher.Builder()
                .translations(main.getTranslations())
                .addDirectories(scanDirectory.toPath())
                .setPreExistingAsCreated(true)
                .build((DirectoryWatcher.Event event, Path path) -> {
                    switch (event) {
                        case ENTRY_CREATE:
                            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                                LOGGER.debug(translations.getMessage("file_created", path));
                            }
                            try {
                                scanner.scanFile(path.toFile());
                            } catch (IOException ex) {
                                if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                                    LOGGER.exception(ex);
                                }
                            }
                            break;

                        case ENTRY_MODIFY:
                            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                                LOGGER.debug(translations.getMessage("file_modified", path));
                            }
                            try {
                                scanner.scanFile(path.toFile());
                            } catch (IOException ex) {
                                if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                                    LOGGER.exception(ex);
                                }
                            }
                            break;
                        case ENTRY_DELETE:
                            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                                LOGGER.debug(translations.getMessage("file_deleted", path));
                            }
                            break;
                    }
                });
        directoryWatcher.run();
    }

    public File getScanDirectory() {
        return scanDirectory;
    }

    public Scanner getScanner() {
        return scanner;
    }

}
