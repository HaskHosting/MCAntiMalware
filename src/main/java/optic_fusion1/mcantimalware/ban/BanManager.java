package optic_fusion1.mcantimalware.ban;

import static optic_fusion1.mcantimalware.Main.URL_PREFIX;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.configuration.ConfigurationSection;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.Utils;
import org.apache.commons.io.IOUtils;

public class BanManager {

  private List<PlayerBanEntry> playerBanEntries = new ArrayList<>();
  private static final boolean SHOULD_EXCEPTIONS_BE_LOGGED = AntiMalware.getCommandLineHandler().shouldExceptionsBeLogged();
  private static final CustomLogger LOGGER = AntiMalware.getLogger();
  private static final String BANNED_PLAYERS_URL = URL_PREFIX + "banned-players.yml";
  private FileConfiguration bannedPlayersConfig;

  public void handleBans() {
    loadBans();
    autoBan();
    saveBans();
  }

  private void downloadBannedPlayersDatabase() {
    try {
      LOGGER.info(I18n.tl("downl_banned_players_database"));
      bannedPlayersConfig = YamlConfiguration.loadConfiguration(IOUtils.toInputStream(
       IOUtils.toString(new URL(BANNED_PLAYERS_URL), "UTF-8"), "UTF-8"));
      LOGGER.info(I18n.tl("finish_downl_banned_players_database"));
    } catch (MalformedURLException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    } catch (IOException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    }
  }

  private void loadBans() {
    File playerBans = new File("banned-players.json");
    try {
      String jsonString = IOUtils.toString(new FileInputStream(playerBans), "UTF-8");
      if (!jsonString.isEmpty()) {
        JsonArray playerBanEntryArray = new JsonParser().parse(jsonString).getAsJsonArray();
        if (playerBanEntryArray.size() != 0) {
          for (JsonElement playerBan : playerBanEntryArray) {
            parse(playerBan.getAsJsonObject());
          }
          LOGGER.info("Loaded " + playerBanEntryArray.size() + " player bans");
        }
      }
    } catch (FileNotFoundException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    } catch (IOException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    }
  }

  private void saveBans() {
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    JsonArray playerBans = new JsonArray();
    playerBanEntries.forEach((entry) -> {
      if (!playerBans.contains(entry.asJsonObject())) {
        playerBans.add(entry.asJsonObject());
      }
    });

    try (Writer writer = new FileWriter("banned-players.json")) {
      gson.toJson(playerBans, writer);
    } catch (IOException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    }
  }

  private void addPlayerBan(PlayerBanEntry entry) {
    for (PlayerBanEntry banEntry : playerBanEntries) {
      if (banEntry.equals(entry)) {
        return;
      }
    }
    playerBanEntries.add(entry);
    LOGGER.info("Banned " + entry.getName() + "(" + entry.getUUID() + ")");
  }

  private boolean isPlayerBanned(String playerName, String playerUUID) {
    return playerBanEntries.stream().filter((entry) -> (entry.getUUID().equals(playerUUID)))
     .anyMatch((entry) -> (entry.getName().equals(playerName)));
  }

  private void autoBan() {
    downloadBannedPlayersDatabase();
    if (bannedPlayersConfig == null || bannedPlayersConfig.getKeys(false).isEmpty()) {
      InputStream databaseInputStream = Utils.getResource("banned-players.yml");
      bannedPlayersConfig = YamlConfiguration.loadConfiguration(databaseInputStream);
      if (bannedPlayersConfig == null || bannedPlayersConfig.getKeys(false).isEmpty()) {
        LOGGER.info(I18n.tl("banned_players_database_not_found"));
        return;
      }
    }
    bannedPlayersConfig.getKeys(false).forEach((key) -> {
      ConfigurationSection section = bannedPlayersConfig.getConfigurationSection(key);
      List<String> uuids = new ArrayList<>();
      if (section.isList("uuid")) {
        uuids = section.getStringList("uuid");
      } else {
        uuids.add(section.getString("uuid"));
      }
      List<String> previousNames = new ArrayList<>();
      if (section.isSet("previous-names")) {
        if (section.isList("previous-names")) {
          previousNames = section.getStringList("previous-names");
        } else {
          previousNames.add(section.getString("previous-names"));
        }
      }
      for (String uuid : uuids) {
        if (!isPlayerBanned(key, uuid)) {
          addPlayerBan(new PlayerBanEntry(key, uuid));
        }
        if (!previousNames.isEmpty()) {
          for (String previousName : previousNames) {
            if (!isPlayerBanned(previousName, uuid)) {
              addPlayerBan(new PlayerBanEntry(previousName, uuid));
            }
          }
        }
      }
    });
  }

  private void parse(JsonObject object) {
    if (object == null) {
      return;
    }
    String created = object.get("created").getAsString();
    String source = object.get("source").getAsString();
    String expires = object.get("expires").getAsString();
    String reason = object.get("reason").getAsString();
    String uuid = "00000000-0000-0000-0000-000000000000";
    if (object.has("uuid")) {
      uuid = object.get("uuid").getAsString();
    }
    String name = "none";
    if (object.has("name")) {
      name = object.get("name").getAsString();
    }
    if (!name.equals("none") && !uuid.equals("00000000-0000-0000-0000-000000000000")) {
      if (!isPlayerBanned(name, uuid)) {
        addPlayerBan(new PlayerBanEntry(name, uuid, created, source, expires, reason));
      }
    }
  }

}
