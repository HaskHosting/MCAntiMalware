package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.io.FileDescriptor;
import java.net.InetAddress;
import java.security.Permission;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.CommandLineHandler;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.RuntimeUtils;
import optic_fusion1.mcantimalware.utils.StringUtils;

public class AntiMalwareSecurityManager extends DomainAccessController {

    private static final CustomLogger LOGGER = AntiMalware.getLogger();
    private static final CommandLineHandler COMMAND_LINE_HANDLER = AntiMalware.getCommandLineHandler();
    private static final boolean SHOULD_DEBUG_MESSAGES_BE_LOGGED = COMMAND_LINE_HANDLER.shouldDebugMessagesBeLogged();
    private static final boolean CAN_USE_SPIGOT_METHODS = AntiMalware.getMain().canUseSpigotMethods();
    
    @Override
    public void checkSecurityAccess(String target) {
    }

    @Override
    public void checkRead(String file, Object context) {
    }

    @Override
    public void checkRead(FileDescriptor fd) {
    }

    @Override
    public void checkRead(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null && SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.info("{0} tried reading {1}", new Object[]{callerInfo.getPlugin().getJar(), file});
        }
    }

    @Override
    public void checkPropertyAccess(String key) {
    }

    @Override
    public void checkPermission(Permission perm) {
    }

    @Override
    public void checkPermission(Permission perm, Object context) {
    }

    @Override
    public void checkPackageDefinition(String pkg) {
    }

    @Override
    public void checkPackageAccess(String pkg) {
    }

    @Override
    public void checkMulticast(InetAddress maddr) {
    }

    @Override
    public void checkListen(int port) {
    }

    @Override
    public void checkLink(String lib) {
    }

    @Override
    public void checkExec(String cmd) {
    }

    @Override
    public void checkWrite(FileDescriptor fd) {
    }

    @Override
    public void checkWrite(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (file.contains("MCAntiMalware.jar")) {
                throw new FormattedSecurityException("{0} tried writing to the AntiMalware jar {0} is most likely malicious",
                        pluginJar);
            }
            if (CAN_USE_SPIGOT_METHODS && file.contains(COMMAND_LINE_HANDLER.getServerJar().toString())) {
                throw new FormattedSecurityException("{0} tried writing to the server jar {0} is most likely malicious",
                        pluginJar);
            }
            if (file.contains("PluginMetrics.jar")) {
                throw new FormattedSecurityException("{0} tried writing to PluginMetrics.jar {0} is most likely malicious",
                        pluginJar);
            }
            if (file.contains("RIP UR FILES") || file.contains("Jinx on HF")) {
                throw new FormattedSecurityException("{0} tried using a known malicious spamming method "
                        + "{0 is most likely malicious}", pluginJar);
            }
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                LOGGER.info("{0} tried writing to {1}", new Object[]{pluginJar, file});
            }
        }
    }

    @Override
    public void checkExit(int status) {
    }

    @Override
    public void checkDelete(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (file.contains("MCAntiMalware.jar")) {
                throw new SecurityException(StringUtils.format("{0} tried deleting the AntiMalware jar", pluginJar));
            }
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                LOGGER.info("{0} deleted the file {1}", new Object[]{pluginJar, file});
            }
        }
    }

    @Override
    public void checkConnect(String host, int port, Object context) {
    }

    @Override
    public void checkConnect(String host, int port) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (host.contains("https://2no.co/2Z2NR5")
                    || host.contains("blackflagtv")
                    || host.contains("http://tommyw.cc")
                    || host.contains("https://en1r3se8fpe26.x.pipedream.net/")
                    || host.contains("https://pastebin.com/raw/Him8uqdd")
                    || host.contains("https://thesieutoc.net/")
                    || host.contains("update4life.xyz")
                    || host.contains("https://guckenyt13.wixsite.com/")
                    || host.contains("https://goo.gl/O6WDUX")
                    || host.contains("https://pastebin.com/raw/W9Xj6737")
                    || host.contains("http://tommyw.cc")
                    || host.contains("https://hannemanndev.de")
                    || host.contains("https://web2511.web02.bero-webspace.de/php/minecraft/registerserver.php")) {
                throw new SecurityException(StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0}"
                        + " is most likely malicious", new Object[]{pluginJar, host, port}));
            }
            if (host.contains("directleaks.net")) {
                throw new SecurityException(StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0}"
                        + " is most likely a leaked plugin, SHAME!!!", new Object[]{pluginJar, host, port}));
            }
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
                LOGGER.info("{0} connected to Host: {1} Port: {2}",
                        new Object[]{pluginJar, host, port});
            }
        }
    }

    @Override
    public void checkAccess(ThreadGroup g) {
    }

    @Override
    public void checkAccess(Thread t) {
    }

    @Override
    public void checkAccept(String host, int port) {
    }

}
