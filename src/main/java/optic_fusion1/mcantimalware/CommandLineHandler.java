package optic_fusion1.mcantimalware;

import static java.util.Arrays.asList;

import java.io.File;
import java.io.IOException;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.translations.TranslationFile;
import optic_fusion1.mcantimalware.translations.Translations;
import optic_fusion1.mcantimalware.utils.Utils;

public class CommandLineHandler {

  private static final CustomLogger LOGGER = AntiMalware.getLogger();
  private boolean shouldDebugMessagesBeLogged = false;
  private boolean shouldScanSingleFile = false;
  private boolean shouldNotifyWhenMalicious = true;
  private OptionSet options;
  private TranslationFile translationFile;
  private boolean shouldDisableMaliciousPlugins = true;
  private boolean shouldExceptionsBeLogged = true;
  private boolean shouldDumpClasses = false;
  private File serverJar;
  private boolean shouldBanMaliciousAuthors = false;
  private boolean shouldScanServerJar = false;
  private String[] serverArguments = new String[] {};
  private PluginIndex pluginIndex;
  private File scanFile;
  private boolean printNotInfectedMessage = true;
  private File scanDirectory = new File("plugins");

  public void handleCommandLineArguments(String[] args) {
    OptionParser parser =
        new OptionParser() {
          {
            acceptsAll(asList("debug"), "Whether or not to log debug messages")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(false);
            acceptsAll(asList("scanDirectory"), "Which folder to scan")
                .withRequiredArg()
                .ofType(String.class)
                .defaultsTo("plugins");
            acceptsAll(asList("scanFile"), "Scan a single file")
                .withRequiredArg()
                .ofType(String.class);
            acceptsAll(
                    asList("printNotInfectedMessages"),
                    "Should not infected messages be shown & logged")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(true);
            acceptsAll(asList("help"), "Show the help");
            acceptsAll(asList("language"), "Changes the language of the program")
                .withRequiredArg()
                .ofType(String.class)
                .defaultsTo("en");
            acceptsAll(
                    asList("windowsNotification"),
                    "If this is true, the program will make windows notify you if "
                        + "there was a malicious plugin found (if you run windows)")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(false);
            acceptsAll(asList("serverJar"), "Server jar path")
                .withRequiredArg()
                .ofType(String.class);
            acceptsAll(asList("serverArguments"), "Server arguments")
                .withRequiredArg()
                .ofType(String.class);
            acceptsAll(asList("disableMalPlugins"), "Should we disable malicious plugins?")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(false);
            acceptsAll(asList("logExceptions"), "Should we log exceptions")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(true);
            acceptsAll(asList("banMalAuthors"), "Should we ban malicious authors and possible alts")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(true);
            acceptsAll(asList("dumpClasses"), "Should classes in the classpath be saved")
                .withRequiredArg()
                .ofType(Boolean.class)
                .defaultsTo(false);
          }
        };
    try {
      options = parser.parse(args);
    } catch (joptsimple.OptionException ex) {
      LOGGER.exception(ex);
    }
    if (options != null) {
      if (options.has("disableMalPlugins")) {
        shouldDisableMaliciousPlugins = (Boolean) options.valueOf("disableMalPlugins");
      }
      if (options.has("help")) {
        try {
          parser.printHelpOn(System.out);
        } catch (IOException ex) {
          LOGGER.exception(ex);
        }
        System.exit(0);
      }
      if (options.has("debug")) {
        shouldDebugMessagesBeLogged = (Boolean) options.valueOf("debug");
      }
      if (options.has("scanFile")) {
        shouldScanSingleFile = true;
      }
      Translations translations = new Translations();
      if (options.has("language")) {
        String specifiedLanguage = (String) options.valueOf("language");
        if (!translations.isSupported(specifiedLanguage)) {
          LOGGER.warn(
              "Specified language {0} isn't supported. Defaulting to en", specifiedLanguage);
          translationFile = translations.getTranslationFile("en");
        } else {
          translationFile = translations.getTranslationFile(specifiedLanguage);
        }
      } else {
        translationFile = translations.getTranslationFile("en");
      }
      if (options.has("windowsNotification")) {
        shouldNotifyWhenMalicious = (boolean) options.valueOf("windowsNotification");
      }
      if (options.has("logExceptions")) {
        shouldExceptionsBeLogged = (boolean) options.valueOf("logExceptions");
      }
      if (options.has("dumpClasses")) {
        shouldDumpClasses = (boolean) options.valueOf("dumpClasses");
        int javaVersion = Utils.getJavaVersion();
        if (shouldDumpClasses && javaVersion > 8) {
          LOGGER.info(
              "Java version: {0} is being used, the ability to dump classes isn't supported",
              javaVersion);
          shouldDumpClasses = false;
        }
      }
      if (options.has("serverJar")) {
        shouldScanServerJar = true;
        shouldBanMaliciousAuthors = true;
        pluginIndex = new PluginIndex();
        pluginIndex.indexPlugins(new File("plugins"));
        if (options.has("serverArguments")) {
          serverArguments = ((String) options.valueOf("serverArguments")).split(" ");
        }
        serverJar = new File((String) options.valueOf("serverJar"));
        if (!serverJar.exists()) {
          LOGGER.info(translationFile.getMessage("file_doesn't_exist", serverJar));
          System.exit(0);
        }
      }
      if (options.has("scanFile")) {
        scanFile = new File((String) options.valueOf("scanFile"));
        if (!scanFile.exists()) {
          LOGGER.info(translationFile.getMessage("file_doesn't_exist", scanFile));
          System.exit(0);
        }
      }
      if (options.has("printNotInfectedMessages")) {
        printNotInfectedMessage = (boolean) options.valueOf("printNotInfectedMessages");
      }
      if (options.has("scanDirectory")) {
        String scanDirectoryValue = (String) options.valueOf("scanDirectory");
        scanDirectory =
            new File(
                scanDirectoryValue.equals(".")
                    ? new File(".").getAbsolutePath()
                    : scanDirectoryValue);
        if (!scanDirectory.exists()) {
          LOGGER.alert(translationFile.getMessage("file_doesn't_exist", scanDirectory.getName()));
          System.exit(0);
        }
      }
      if (options.has("banMalAuthors")) {
        shouldBanMaliciousAuthors = (boolean) options.valueOf("banMalAuthors");
      }
    }
  }

  public boolean shouldDebugMessagesBeLogged() {
    return shouldDebugMessagesBeLogged;
  }

  public boolean shouldScanSingleFile() {
    return shouldScanSingleFile;
  }

  public boolean shouldNotifyWhenMalicious() {
    return shouldNotifyWhenMalicious;
  }

  public OptionSet getOptions() {
    return options;
  }

  public TranslationFile getTranslationFile() {
    return translationFile;
  }

  public boolean shouldDisableMaliciousPlugins() {
    return shouldDisableMaliciousPlugins;
  }

  public boolean shouldExceptionsBeLogged() {
    return shouldExceptionsBeLogged;
  }

  public boolean shouldDumpClasses() {
    return shouldDumpClasses;
  }

  public File getServerJar() {
    return serverJar;
  }

  public boolean shouldBanMaliciousAuthors() {
    return shouldBanMaliciousAuthors;
  }

  public boolean shouldScanServerJar() {
    return shouldScanServerJar;
  }

  public String[] getServerArguments() {
    return serverArguments;
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public File getScanFile() {
    return scanFile;
  }

  public boolean shouldPrintNotInfectedMessages() {
    return printNotInfectedMessage;
  }

  public File getScanDirectory() {
    return scanDirectory;
  }
}
