package optic_fusion1.mcantimalware.check.checks;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;
import optic_fusion1.mcantimalware.configuration.InvalidConfigurationException;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.tree.ClassNode;

import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

//TheBean Download: https://www.spigotmc.org/resources/thebean.28452/
public class TheBean extends Check {

    public TheBean(Main main) {
        super("TheBean", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        byte[] content = getPluginYml(zipFile);
        if(content != null) {
            try {
                YamlConfiguration cfg = new YamlConfiguration();
                cfg.loadFromString(new String(content));
                String main;
                return (main = cfg.getString("main")) != null && main.equals("me.jan.tryit.Tryit");
            } catch (InvalidConfigurationException e) {
                logger.exception(e);
            }
        }
        return false;
    }
    
    private byte[] getPluginYml(ZipFile zipFile) {
        try {
            String filePath = zipFile.getName();
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            while (entries.hasMoreElements()) {
                ZipEntry e = entries.nextElement();
                if (e.getName().equals("plugin.yml")) {
                    ZipFile tempZip = new ZipFile(filePath);
                    byte[] content = IOUtils.toByteArray(tempZip.getInputStream(e));
                    tempZip.close();
                    return content;
                }
            }
        } catch (Exception e) {
            logger.exception(e);
        }
        return null;
    }

    @Override
    public boolean detect(InputStream inputStream) {
        return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
        return false;
    }
}
