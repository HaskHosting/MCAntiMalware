package optic_fusion1.mcantimalware.check.checks;

import java.io.InputStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckType;
import optic_fusion1.mcantimalware.check.ClassnodeAndYamlCheck;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class BroadForceOp extends ClassnodeAndYamlCheck {

    private Pattern pattern = Pattern.compile("[^A-Za-z0-9\\s]+op$|[^A-Za-z0-9\\s]+opme$", Pattern.MULTILINE);
    private Matcher matcher;

    public BroadForceOp(Main main) {
        super("BroadForceOp (Possibly a False-Positive)", main, CheckType.Malware);
    }

    @Override
    public boolean detect(InputStream inputStream) {
        return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
        List<MethodNode> nodes = classNode.methods;
        for (MethodNode node : nodes) {
            for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
                    String string = ((LdcInsnNode) insnNode).cst.toString();
                    matcher = pattern.matcher(string);
                    if (matcher.find()) {
                        if (main.shouldLogDebugMessages()) {
                            logger.debug("[BroadForceOp] Found possible force-op " + string);
                        }
                        return true;
                    }else{
                        if(main.shouldLogDebugMessages()){
                            logger.debug("[BroadForceOp] " + string);
                        }
                    }
                }
            }
        }
        return false;
    }

}
