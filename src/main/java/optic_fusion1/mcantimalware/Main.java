package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.lang.instrument.Instrumentation;
import java.net.URL;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.mcantimalware.ban.BanManager;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.realtimescanning.RealTimeScanner;
import optic_fusion1.mcantimalware.translations.TranslationFile;
import optic_fusion1.mcantimalware.utils.Updater;
import optic_fusion1.mcantimalware.utils.Updater.UpdateResult;
import optic_fusion1.mcantimalware.utils.Utils;
import optic_fusion1.mcantimalware.utils.javaagent.ClassDumpTransformer;
import optic_fusion1.mcantimalware.utils.taskchain.AntiMalwareChainFactory;
import org.apache.commons.io.IOUtils;

public class Main implements Runnable {

    public String[] args;
    private static final CustomLogger LOGGER = new CustomLogger();
    private FileConfiguration checksumDatabase;
    private FileConfiguration checkDatabase;
    private CheckManager checkManager;
    private RealTimeScanner realTimeScanner;
    private CheckRegistery checkRegistery;
    public static final String URL_PREFIX = "https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareDatabase/master/";
    private static final String DATABASE_URL = URL_PREFIX + "database.yml";
    private static final String CHECKSUMS_URL = URL_PREFIX + "checksums.yml";
    private TranslationFile currentSessionTranslations;
    private AntiMalwareChainFactory chainFactory;
    private boolean isCurrentlyScanning = false;
    private CommandLineHandler commandLineHandler;
    private boolean shouldExceptionsBeLogged;
    private ServerHandler serverHandler;

    public static void main(String[] args) {
        try {
            Main main = new Main();
            main.args = args;
            main.run();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void agentmain(String agentArgs, Instrumentation inst) {
        inst.addTransformer(new ClassDumpTransformer());
    }

    private void init() {
        chainFactory = new AntiMalwareChainFactory();
        LOGGER.info("Any issues you're facing should be reported here: https://github.com/OpticFusion1/MCAntiMalware/issues");
        AntiMalware.setMain(this);
        commandLineHandler = new CommandLineHandler();
        commandLineHandler.handleCommandLineArguments(args);
        currentSessionTranslations = commandLineHandler.getTranslationFile();
        shouldExceptionsBeLogged = commandLineHandler.shouldExceptionsBeLogged();
        checkForUpdate();
        if (commandLineHandler.shouldBanMaliciousAuthors()) {
            File bannedPlayers = new File("banned-players.json");
            if (bannedPlayers.exists()) {
                LOGGER.info("Banning possible malicious devs");
                new BanManager().handleBans();
                LOGGER.info("Finished banning possible malicious devs");
            }
        }
        downloadCheckDatabase(false);
        downloadChecksumDatabase(false);
        checkManager = new CheckManager();
        checkRegistery = new CheckRegistery(this);
        checkRegistery.registerChecks();
        realTimeScanner = new RealTimeScanner(this);
        if (commandLineHandler.shouldScanSingleFile()) {
            try {
                realTimeScanner.getScanner().scanFile(commandLineHandler.getScanFile());
            } catch (IOException ex) {
                if (shouldExceptionsBeLogged) {
                    LOGGER.exception(ex);
                }
            }
            System.exit(0);
        }
        setupAutoUpdater();
        serverHandler = new ServerHandler();
        serverHandler.handleServer();
        realTimeScanner.setupDirectoryWatcher();
    }

    private void checkForUpdate() {
        Properties properties = new Properties();
        try {
            properties.load(Utils.getResource("project.properties"));
            String currentVersion = properties.getProperty("version");
            Updater updater = new Updater(currentVersion, 64982, false);
            UpdateResult result = updater.getResult();
            if (result == UpdateResult.UPDATE_AVAILABLE) {
                LOGGER.info("************************");
                LOGGER.info("This build of AntiMalware is outdated!");
                LOGGER.info("Current Version: {0} New Version: {1}", new Object[]{currentVersion, updater.getVersion()});
                LOGGER.info("Keep in mind you'll get NO SUPPORT while using this version.");
                LOGGER.info("You can get latest build here: https://www.spigotmc.org/resources/64982/");
                LOGGER.info("The program will start in 20 seconds.");
                LOGGER.info("************************");
                try {
                    Thread.sleep(TimeUnit.SECONDS.toMillis(20));
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            } else if (result == UpdateResult.DEV_BUILD) {
                LOGGER.info("You're running a dev build");
            }
        } catch (IOException ex) {
            if (shouldExceptionsBeLogged) {
                LOGGER.exception(ex);
            }
        }
    }

    private void setupAutoUpdater() {
        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
        executor.scheduleWithFixedDelay(() -> {
            downloadCheckDatabase(true);
            downloadChecksumDatabase(true);
        }, 1, 4, TimeUnit.HOURS);
    }

    private void downloadCheckDatabase(boolean updateDatabase) {
        try {
            LOGGER.info(currentSessionTranslations.getMessage("downl_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
            checkDatabase = YamlConfiguration.loadConfiguration(IOUtils.toInputStream(IOUtils.toString(new URL(DATABASE_URL), "UTF-8"), "UTF-8"));
            LOGGER.info(currentSessionTranslations.getMessage(
                    "finish_download_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
            if (isCurrentlyScanning) {
                return;
            }
            if (updateDatabase) {
                LOGGER.info(currentSessionTranslations.getMessage("reloading_check_database"));
                checkRegistery.reloadCheckDatabase();
                checkRegistery.registerChecks();
                LOGGER.info(currentSessionTranslations.getMessage("reloaded_check_database"));
                LOGGER.info(currentSessionTranslations.getMessage("rescan_updated"));
                realTimeScanner.getScanner().scanFiles();
                LOGGER.info(currentSessionTranslations.getMessage("finish_rescan"));
            }
        } catch (IOException ex) {
            if (shouldExceptionsBeLogged) {
                LOGGER.exception(ex);
            }
        }
    }

    private void downloadChecksumDatabase(boolean update) {
        try {
            LOGGER.info(currentSessionTranslations.getMessage("downl_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
            checksumDatabase = YamlConfiguration.loadConfiguration(IOUtils.toInputStream(IOUtils.toString(new URL(CHECKSUMS_URL), "UTF-8"), "UTF-8"));
            LOGGER.info(currentSessionTranslations.getMessage("finish_download_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
            if (isCurrentlyScanning) {
                return;
            }
            if (update) {
                LOGGER.info(currentSessionTranslations.getMessage("reloading_checksum_database"));
                realTimeScanner.getScanner().reloadChecksumDatabase();
                LOGGER.info(currentSessionTranslations.getMessage("reloaded_checksum_database"));
                LOGGER.info(currentSessionTranslations.getMessage("rescan_updated"));
                realTimeScanner.getScanner().scanFiles();
                LOGGER.info(currentSessionTranslations.getMessage("finish_rescan"));
            }
        } catch (IOException ex) {
            if (shouldExceptionsBeLogged) {
                LOGGER.exception(ex);
            }
        }
    }

    public TranslationFile getTranslations() {
        return currentSessionTranslations;
    }

    public AntiMalwareChainFactory getChainFactory() {
        return chainFactory;
    }

    @Override
    public void run() {
        init();
    }

    public CustomLogger getLogger() {
        return LOGGER;
    }

    public CheckManager getCheckManager() {
        return checkManager;
    }

    public RealTimeScanner getRealTimeScanner() {
        return realTimeScanner;
    }

    public FileConfiguration getChecksumDatabase() {
        if (checksumDatabase == null) {
            downloadChecksumDatabase(false);
        }
        return checksumDatabase;
    }

    public FileConfiguration getCheckDatabase() {
        if (checkDatabase == null) {
            downloadCheckDatabase(false);
        }
        return checkDatabase;
    }

    public void setIsCurrentlyScanning(boolean isCurrentlyScanning) {
        this.isCurrentlyScanning = isCurrentlyScanning;
    }

    public boolean isCurrentlyScanning() {
        return isCurrentlyScanning;
    }

    public CommandLineHandler getCommandLineHandler() {
        return commandLineHandler;
    }

    public boolean canUseSpigotMethods() {
        return serverHandler.canUseSpigotMethods();
    }

}
