/*
 * Copyright 2017 Sam Sun <github-contact@samczsun.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.javadeobfuscator.javavm.mirrors;

import java.lang.reflect.Modifier;

public abstract class JavaExecutable {

  static final int ACCESS_MODIFIERS
          = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;

  void separateWithCommas(JavaClass[] types, StringBuilder sb) {
    for (int j = 0; j < types.length; j++) {
      sb.append(types[j].getTypeName());
      if (j < (types.length - 1)) {
        sb.append(",");
      }
    }

  }

  void printModifiersIfNonzero(StringBuilder sb, int mask, boolean isDefault) {
    int mod = getModifiers() & mask;

    if (mod != 0 && !isDefault) {
      sb.append(Modifier.toString(mod)).append(' ');
    } else {
      int access_mod = mod & ACCESS_MODIFIERS;
      if (access_mod != 0) {
        sb.append(Modifier.toString(access_mod)).append(' ');
      }
      if (isDefault) {
        sb.append("default ");
      }
      mod = (mod & ~ACCESS_MODIFIERS);
      if (mod != 0) {
        sb.append(Modifier.toString(mod)).append(' ');
      }
    }
  }

  /**
   * Generate toString header information specific to a method or constructor.
   */
  abstract void specificToStringHeader(StringBuilder sb);

  abstract int getModifiers();

  String sharedToString(int modifierMask,
          boolean isDefault,
          JavaClass[] parameterTypes,
          JavaClass[] exceptionTypes) {
    try {
      StringBuilder sb = new StringBuilder();

      printModifiersIfNonzero(sb, modifierMask, isDefault);
      specificToStringHeader(sb);

      sb.append('(');
      separateWithCommas(parameterTypes, sb);
      sb.append(')');
      if (exceptionTypes.length > 0) {
        sb.append(" throws ");
        separateWithCommas(exceptionTypes, sb);
      }
      return sb.toString();
    } catch (Exception e) {
      return "<" + e + ">";
    }
  }
}
