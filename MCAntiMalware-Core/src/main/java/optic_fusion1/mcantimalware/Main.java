package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.database.AntiMalwareDatabase;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.metrics.MetricManager;
import optic_fusion1.mcantimalware.metrics.metric.JVMMetric;
import optic_fusion1.mcantimalware.metrics.metric.MemoryMetric;
import optic_fusion1.mcantimalware.notification.NotificationHandler;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.scanner.Scanner.Status;
import optic_fusion1.mcantimalware.scanner.realtime.RealTimeScanner;
import optic_fusion1.mcantimalware.servers.ServerHandler;
import optic_fusion1.mcantimalware.service.impl.PlayerBanService;
import optic_fusion1.mcantimalware.service.impl.UpdaterCheckerService;
import optic_fusion1.mcantimalware.spigotmcscanner.SpigotMCScanner;
import optic_fusion1.mcantimalware.usb.USBDriveHandler;
import optic_fusion1.mcantimalware.utils.I18n;

public class Main extends Thread {

  public static final CustomLogger LOGGER = new CustomLogger();
  private static final File DATA_FOLDER = new File("AntiMalware");
  private static Main main;
  private NotificationHandler notificationHandler;
  public String[] args;
  private AntiMalwareDatabase database;
  private CheckManager checkManager;
  private CommandLineParser commandLineParser;
  private ServerHandler serverHandler;
  private Scanner scanner;

  public Main(String[] args) {
    setName("AntiMalware/Main Thread");
    main = this;
    this.args = args;
  }

  private void init() {
    (commandLineParser = new CommandLineParser()).handleCommandLineArguments(args);
    LOGGER.info(I18n.tl("initializing_start"));
    if (commandLineParser.shouldUseMetrics()) {
      new MetricManager(this).registerMetrics(new JVMMetric(), new MemoryMetric()).start();
    }
    if (!DATA_FOLDER.exists()) {
      DATA_FOLDER.mkdirs();
    }
    LOGGER.info(I18n.tl("github_issues"));
    notificationHandler = new NotificationHandler(commandLineParser);
    if (!commandLineParser.shouldRunServerJar()) {
      LOGGER.info(I18n.tl("run_server_message"));
    }
    new UpdaterCheckerService();
    if (commandLineParser.shouldBanMaliciousAuthors() && new File("banned-players.json").exists()) {
      new PlayerBanService();
    }
    downloadDatabase(false);
    checkManager = new CheckManager();
    (new CheckRegistery(this)).registerChecks();
    if (commandLineParser.singleScan() || commandLineParser.shouldScanSingleFile()) {
      scanner = new RealTimeScanner(this, commandLineParser.getScanDirectory());
      if (commandLineParser.shouldScanSingleFile()) {
        scanner.addFileToQueue(commandLineParser.getScanFile().toPath());
      } else {
        scanner.scanFiles();
      }
      return;
    } else {
      scanner = new RealTimeScanner(this, commandLineParser.getScanDirectory());
    }
    if (!commandLineParser.shouldDisableAutoUpdate()) {
      LOGGER.info(I18n.tl("setup_auto_update"));
      setupAutoUpdater();
    }
    if (commandLineParser.shouldRunServerJar()) {
      serverHandler = ServerHandler.identifyServerType(this);
      if (serverHandler != null) {
        serverHandler.handleServer();
        LOGGER.info("Server TYPE: " + serverHandler.getServerTypeName());
      }
    }

    if (commandLineParser.shouldScanDrives()) {
      new USBDriveHandler(this);
    }
    if (commandLineParser.shouldScanLatestSpigotResources()) {
      new SpigotMCScanner(this, new File(DATA_FOLDER, "plugins")).start();
    } else {
      ((RealTimeScanner) scanner).setupDirectoryWatcher();
    }
    LOGGER.info(I18n.tl("initializing_end"));
  }

  private void setupAutoUpdater() {
    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
    executor.scheduleWithFixedDelay(() -> {
      downloadDatabase(true);
    }, 1, 4, TimeUnit.HOURS);
  }

  public void downloadDatabase(boolean updateDatabase) {
    LOGGER.info(I18n.tl("database_download_start"), (updateDatabase ? "AUTO-UPDATE" : ""));
    if (database == null) {
      database = new AntiMalwareDatabase(LOGGER);
      LOGGER.info(I18n.tl("download_database_end"));
    } else if (updateDatabase) {
      LOGGER.info(I18n.tl("database_update_start"));
      synchronized (database) {
        database = new AntiMalwareDatabase(LOGGER);
      }
      LOGGER.info(I18n.tl("database_update_end"));
      if (scanner != null && scanner.getStatus() == Status.SCANNING) {
        LOGGER.info(I18n.tl("scanner_rescan_start"));
        scanner.scanFiles();
        LOGGER.info(I18n.tl("scanner_rescan__end"));
      }
    }
  }

  @Override
  public void run() {
    init();
  }

  public CustomLogger getLogger() {
    return LOGGER;
  }

  public CheckManager getCheckManager() {
    return checkManager;
  }

  public Scanner getScanner() {
    return scanner;
  }

  public CommandLineParser getCommandLineParser() {
    return commandLineParser;
  }

  public boolean canUseSpigotMethods() {
    if (serverHandler == null) {
      return false;
    }
    return serverHandler.canUseSpigotMethods();
  }

  public File getDataFolder() {
    return DATA_FOLDER;
  }

  public static Main getInstance() {
    return main;
  }

  public synchronized AntiMalwareDatabase getDatabase() {
    return database;
  }

  public NotificationHandler getNotificationHandler() {
    return notificationHandler;
  }

  public static void main(String[] args) throws IOException {
    try {
      new Main(args).start();
    } catch (Exception ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

}
