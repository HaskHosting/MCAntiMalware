package optic_fusion1.mcantimalware.nbt;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.mcantimalware.nbt.tag.builtin.CompoundTag;
import optic_fusion1.mcantimalware.nbt.tag.builtin.IntTag;
import optic_fusion1.mcantimalware.nbt.tag.builtin.ListTag;
import optic_fusion1.mcantimalware.nbt.tag.builtin.StringTag;

public class NewClass {

  public static void main(String[] args) {
    CompoundTag bot = new CompoundTag("bot");
    addBasicInfo(bot);
    addBasicNoMatches(bot);
    addBasicEvents(bot);
    addBasicResponses(bot);
    addBasicMiscellaneousResponses(bot);
    addRegexes(bot);
    try {
      NBTIO.writeFile(bot, new File("test.dat"));
    } catch (IOException ex) {
      Logger.getLogger(NewClass.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  private static void addBasicMiscellaneousResponses(CompoundTag botTag) {
    CompoundTag miscellaneousTag = new CompoundTag("miscellaneous");
    //Handles miscellaneous.hi-friend - START
    CompoundTag hiFriendTag = new CompoundTag("hi-friend");
    ListTag hiFriendTagResponses = new ListTag("responses");
    addStringToListTag(hiFriendTagResponses, "response", "Hello, how are you?");
    hiFriendTag.put(hiFriendTagResponses);
    //Handles miscellaneous.hi-friend - END
    miscellaneousTag.put(hiFriendTag);
    botTag.put(miscellaneousTag);
  }

  private static void addBasicResponses(CompoundTag botTag) {
    CompoundTag responses = new CompoundTag("responses");
    //Handles responses.spawn
    CompoundTag spawnResponseTag = new CompoundTag("spawn");
    ListTag spawnResponses = new ListTag("responses");
    spawnResponses.add(new StringTag("response", "{\"text\":\"Click me to go to spawn\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/spawn\"}}"));
    spawnResponseTag.put(spawnResponses);
    responses.put(spawnResponseTag);

    //Handles responses.you.*
    CompoundTag youTag = new CompoundTag("you");
    //Handles responses.you.bore.me - START
    CompoundTag boreTag = new CompoundTag("bore");
    CompoundTag meTag = new CompoundTag("me");
    ListTag meTagResponses = new ListTag("responses");
    addStringToListTag(meTagResponses, "response", "Why are you talking to me then?");
    meTag.put(meTagResponses);
    boreTag.put(meTag);
    youTag.put(boreTag);
    //Handles responses.you.bore.me - END
    //Handles responses.you.are.doing.* - START
    CompoundTag areTag = new CompoundTag("are");
    CompoundTag doingTag = new CompoundTag("doing");
    //Handles responses.you.are.doing.fine - START
    CompoundTag fineTag = new CompoundTag("fine");
    ListTag fineTagResponses = new ListTag("responses");
    addStringToListTag(fineTagResponses, "response", "Thanks I do my best.");
    fineTag.put(fineTagResponses);
    doingTag.put(fineTag);
    //Handles responses.you.are.doing.fine - END
    //Handles responses.you.are.doing.great - START
    CompoundTag greatTag = new CompoundTag("great");
    ListTag greatTagResponses = new ListTag("responses");
    addStringToListTag(greatTagResponses, "response", "You are too kind. Maybe later I will be really great.");
    greatTag.put(greatTagResponses);
    doingTag.put(greatTag);
    //Handles responses.you.are.doing.great - END
    areTag.put(doingTag);
    youTag.put(areTag);
    responses.put(youTag);
    botTag.put(responses);
  }

  private static void addBasicEvents(CompoundTag botTag) {
    CompoundTag eventsTag = new CompoundTag("events");
    //Handles events.playerjoin
    CompoundTag playerJoinTag = new CompoundTag("player-join");
    ListTag playerJoinTagResponses = new ListTag("responses");
    addStringToListTag(playerJoinTagResponses, "response", "Hello %player_name%");
    playerJoinTag.put(playerJoinTagResponses);
    eventsTag.put(playerJoinTag);

    //Handles events.playerquit
    CompoundTag playerQuitTag = new CompoundTag("player-quit");
    ListTag playerQuitTagResponses = new ListTag("responses");
    addStringToListTag(playerQuitTagResponses, "response", "Goodbye %player_name%");
    playerQuitTag.put(playerQuitTagResponses);
    eventsTag.put(playerQuitTag);

    botTag.put(eventsTag);
  }

  private static void addBasicNoMatches(CompoundTag botTag) {
    CompoundTag noMatchesTag = new CompoundTag("no-matches");
    //Handles no-matches.bot-name-only
    CompoundTag botNameOnlyTag = new CompoundTag("bot-name-only");
    ListTag botNameOnlyTagResponses = new ListTag("responses");
    addStringToListTag(botNameOnlyTagResponses, "response", "Hi!");
    addStringToListTag(botNameOnlyTagResponses, "response", "Hhello there player!");
    botNameOnlyTag.put(botNameOnlyTagResponses);
    noMatchesTag.put(botNameOnlyTag);
    botTag.put(noMatchesTag);

    //Handles no-matches.sentence-not-found
    CompoundTag sentenceNotFoundTag = new CompoundTag("sentence-not-found");
    ListTag sentenceNotFoundTagResponses = new ListTag("responses");
    addStringToListTag(sentenceNotFoundTagResponses, "response", "What do you mean %player_name%");
    addStringToListTag(sentenceNotFoundTagResponses, "response", "Try to rephrase your question.");
    addStringToListTag(sentenceNotFoundTagResponses, "response", "Try asking me the question again in simpler terms.");
    sentenceNotFoundTag.put(sentenceNotFoundTagResponses);
    noMatchesTag.put(sentenceNotFoundTag);
    botTag.put(noMatchesTag);
  }

  private static void addBasicInfo(CompoundTag botTag) {
    botTag.put(new StringTag("name", "ChatBot"));
    ListTag aliases = new ListTag("aliases", StringTag.class);
    aliases.add(new StringTag("alias", "Bot"));
    botTag.put(aliases);
    botTag.put(new StringTag("prefix", "&8[&c&lChatBot&8] &c&lÂ»"));
    botTag.put(new IntTag("response-speed", 10));
    botTag.put(new StringTag("message-added", "Added the message"));
    botTag.put(new IntTag("default", 1));
  }

  private static void addRegexes(CompoundTag botTag) {
    CompoundTag regexes = new CompoundTag("regexes");
    addStringTagToCompound(regexes, "(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9]))", "Please don't share ips!");
    addStringTagToCompound(regexes, "((?:https\\:\\/\\/)|(?:http\\:\\/\\/)|(?:www\\.))?([a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(?:\\??)[a-zA-Z0-9\\-\\._\\?\\,\\'\\/\\\\\\+&%\\$#\\=~]+)", "Please don't share domains!");
    addStringTagToCompound(regexes, "[A-Z]{2,}\\b|[A-Z]{2}\\b", "Please keep the capital letters to a minimum");
    addStringTagToCompound(regexes, "you gave the wrong (answer|response)", "Maybe, it will be looked into");
    addStringTagToCompound(regexes, "you should get( a little)? smarter", "I get a little smarter every day!");
    addStringTagToCompound(regexes, "you are doing (well|not bad|pretty well)", "Oh no, not that well. I have a long way to go yet.");
    addStringTagToCompound(regexes, "you are a bad (chatbot|teacher)", "I can only teach what was programmed for me.");
    addStringTagToCompound(regexes, "you (never answered my question|did not answer me)", "Try to rephrase your question");
    botTag.put(regexes);
  }

  private static void addStringToListTag(ListTag tag, String name, String value) {
    StringTag stringTag = new StringTag(name, value);
    tag.add(stringTag);
  }

  private static void addStringTagToCompound(CompoundTag tag, String name, String value) {
    StringTag stringTag = new StringTag(name, value);
    tag.put(stringTag);
  }

}
