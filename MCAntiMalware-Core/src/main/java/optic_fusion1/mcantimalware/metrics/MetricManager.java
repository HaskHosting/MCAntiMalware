package optic_fusion1.mcantimalware.metrics;

import com.influxdb.client.InfluxDBClient;
import com.influxdb.client.InfluxDBClientFactory;
import com.influxdb.client.WriteApi;
import com.influxdb.client.domain.WritePrecision;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.metrics.metric.Metric;

public class MetricManager {

  private static final List<Metric> METRICS = new ArrayList<>();
  private static final ScheduledExecutorService EXECUTOR = Executors.newScheduledThreadPool(1);
  private static final int INTERVAL = 10;
  private InfluxDBClient client;
  private char[] token;
  private String org;
  private String bucket;
  private String url;
  private Main main;

  public MetricManager(Main main) {
    CommandLineParser clp = main.getCommandLineParser();
    token = clp.getMetricsToken();
    org = clp.getMetricsOrg();
    bucket = clp.getMetricsBucket();
    url = clp.getMetricsUrl();
  }

  public void start() {
    client = InfluxDBClientFactory.create(url, token, org, bucket);
    WriteApi api = client.getWriteApi();
    //TODO: Make this configurable
    EXECUTOR.scheduleAtFixedRate(() -> {
      for (Metric metric : METRICS) {
        api.writeMeasurement(WritePrecision.MS, metric.getMeasurement(main));
      }
    }, 0, INTERVAL, TimeUnit.SECONDS);
  }

  public MetricManager registerMetrics(Metric... metrics) {
    for(Metric metric : metrics){
      registerMetric(metric);
    }
    return this;
  }

  public void registerMetric(Metric metric) {
    METRICS.add(metric);
  }

}
