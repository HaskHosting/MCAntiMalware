package optic_fusion1.mcantimalware.transformers;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Callable;
import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.BindingPriority;
import net.bytebuddy.implementation.bind.annotation.RuntimeType;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.mcantimalware.utils.I18n;

public final class SimplePluginManagerTransformer {

  private SimplePluginManagerTransformer() {

  }

  public static void clearPlugins(@SuperCall Callable superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("tried_to_disable_all_plugins", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  //TODO: Add the following methods to the transformer
  //public Plugin[] loadPlugins(final File directory)
  //callEvent(final Event event) 
  //registerEvent(final Event.Type type, final Listener listener, final Event.Priority priority, final Plugin plugin)
  //registerEvent(final Event.Type type, final Listener listener, final EventExecutor executor, final Event.Priority priority, final Plugin plugin)

  @BindingPriority(Integer.MAX_VALUE)
  public static void loadPlugin(@SuperCall Callable superCall, @RuntimeType @Argument(0) Object file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(I18n.tl("tried_to_load_plugin",
                  callerInfo.getPlugin().getJar(), getPluginName(file)));
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void disablePlugin(@SuperCall Callable superCall, @RuntimeType @Argument(0) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(I18n.tl("tried_to_disable_plugin",
                  callerInfo.getPlugin().getJar(), getPluginName(plugin)));
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static void disablePlugins(@SuperCall Callable superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("tried_to_disable_all_plugins", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void enablePlugin(@SuperCall Callable superCall, @RuntimeType @Argument(0) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(I18n.tl("tried_to_enable_plugin", callerInfo.getPlugin().getJar(),
                  getPluginName(plugin)));
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static String getPluginName(Object plugin) throws IllegalAccessException, IllegalArgumentException,
          InvocationTargetException, NoSuchMethodException, SecurityException {
    return (String) plugin.getClass().getMethod("getName").invoke(plugin);
  }

}
