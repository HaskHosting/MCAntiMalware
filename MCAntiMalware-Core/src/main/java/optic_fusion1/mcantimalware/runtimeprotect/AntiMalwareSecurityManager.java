package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.net.InetAddress;
import java.security.Permission;
import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.database.AntiMalwareDatabase;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.mcantimalware.utils.StringUtils;

public class AntiMalwareSecurityManager extends SecurityManager {

  private final CommandLineParser commandLineParser;
  private final boolean canUseSpigotMethods;
  private final Main main;
  private AntiMalwareDatabase database;

  public AntiMalwareSecurityManager(Main main) {
    this.main = main;
    commandLineParser = main.getCommandLineParser();
    canUseSpigotMethods = main.canUseSpigotMethods();
    database = main.getDatabase();
  }

  @Override
  public void checkSecurityAccess(String target) {
    log(RuntimeUtils.getCallerInfo(), "checkSecurityAccess Target: " + target);
  }

  @Override
  public void checkRead(String file, Object context) {
    checkRead0(file, context);
  }

  @Override
  public void checkRead(String file) {
    checkRead0(file, null);
  }

  private void checkRead0(String file, Object context) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (database.isReadBlacklisted(file)) {
        throw new FormattedSecurityException("{0} tried reading a known malicious file {1}, {0} is most likely malicious", new Object[]{pluginJar, file});
      }
      if (file.contains("AntiMalware")) {
        throw new FormattedSecurityException("{0} tried reading a file in the AntiMalware directory, {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkRead File: " + file + (context != null ? "Context: " + context : ""));
  }

  @Override
  public void checkPropertyAccess(String key) {
    log(RuntimeUtils.getCallerInfo(), "checkPropertyAccess Key: " + key);
  }

  @Override
  public void checkPermission(Permission perm) {
    checkPermission0(perm, null);
  }

  @Override
  public void checkPermission(Permission perm, Object context) {
    checkPermission0(perm, context);
  }

  private void checkPermission0(Permission perm, Object context) {
    if (perm.getName().equals("setSecurityManager")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried setting the SecurityManager {0} MIGHT be malicious", pluginJar);
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkPermission Perm: " + perm.toString() + (context != null ? " Context: " + context.toString() : ""));
  }

  @Override
  public void checkPackageDefinition(String pkg) {
    log(RuntimeUtils.getCallerInfo(), "checkPackageDefinition Pkg: " + pkg);
  }

  @Override
  public void checkPackageAccess(String pkg) {
    if (pkg.contains("java.util")) {
      return;
    }
    if (pkg.contains("optic_fusion1.mcantimalware") && !pkg.startsWith("optic_fusion1.mcantimalware.transformers")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        throw new FormattedSecurityException("{0} tried accessing an AntiMalware package, it might be malicious",
                callerInfo.getPlugin().getJar());
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkPackageAccess Pkg: " + pkg);
  }

  @Override
  public void checkMulticast(InetAddress maddr) {
    log(RuntimeUtils.getCallerInfo(), "checkMulticast InetAddress: " + maddr.toString());
  }

  @Override
  public void checkListen(int port) {
    log(RuntimeUtils.getCallerInfo(), "checkListen Port: " + port);
  }

  @Override
  public void checkLink(String lib) {
    log(RuntimeUtils.getCallerInfo(), "checkLink Lib: " + lib);
  }

  @Override
  public void checkExec(String cmd) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (database.isExecBlacklisted(cmd)) {
        throw new FormattedSecurityException("{0} tried running a known exec command {1}, {0} is most likely malicious", new Object[]{pluginJar, cmd});
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkExec: " + cmd);
  }

  @Override
  public void checkWrite(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (database.isWriteBlacklisted(file)) {
        throw new FormattedSecurityException("{0} tried writing to a known malicious file {1}, {0} is most likely malicious", new Object[]{pluginJar, file});
      }
      if (file.contains("AntiMalware")) {
        throw new FormattedSecurityException("{0} tried writing to a file in the AntiMalware directory, {0} is most likely malicious", pluginJar);
      }
      if (file.contains("MCAntiMalware.jar")) {
        throw new FormattedSecurityException("{0} tried writing to the AntiMalware jar {0} is most likely malicious",
                pluginJar);
      }
      if (canUseSpigotMethods && file.contains(commandLineParser.getServerJar().toString())) {
        throw new FormattedSecurityException("{0} tried writing to the server jar {0} is most likely malicious",
                pluginJar);
      }
      if (main.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to write to a file called {1}",
                new Object[]{pluginJar, file});
      }
      log(callerInfo, "checkWrite File:" + file);
    }
  }

  @Override
  public void checkExit(int status) {
    log(RuntimeUtils.getCallerInfo(), "checkExit Status: " + status);
  }

  @Override
  public void checkDelete(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (file.contains("MCAntiMalware.jar")) {
        throw new SecurityException(StringUtils.format("{0} tried deleting the AntiMalware jar", pluginJar));
      }
      if (main.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to delete a file called {1}", new Object[]{pluginJar, file});
      }
      if (file.contains("AntiMalware")) {
        throw new FormattedSecurityException("{0} tried deleting a file in the AntiMalware directory, {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkDelete File: " + file);
  }

  @Override
  public void checkConnect(String host, int port, Object context) {
    checkConnect0(host, port, context);
  }

  @Override
  public void checkConnect(String host, int port) {
    checkConnect0(host, port, null);
  }

  private void checkConnect0(String host, int port, Object context) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (database.isURLBlacklisted(host)) {
        throw new SecurityException(
                StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0} is most likely malicious",
                        new Object[]{pluginJar, host, port}));
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkConnect Host: " + host + " Port: " + port + (context != null ? "Context: " + context : ""));
  }

  @Override
  public void checkAccess(ThreadGroup g) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess ThreadGroup: " + g.toString());
  }

  @Override
  public void checkAccess(Thread t) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess Thread: " + t.toString());
  }

  @Override
  public void checkAccept(String host, int port) {
    log(RuntimeUtils.getCallerInfo(), "checkAccept Host: " + host + " Port:" + port);
  }

  private void log(CallerInfo callerInfo, String string) {
    if (commandLineParser.shouldLogSecurityManager()) {
      if (callerInfo != null) {
        LOGGER.debug("[AntiMalwareSecurityManager] " + callerInfo.toString() + " " + string);
      } else {
        LOGGER.debug("[AntiMalwareSecurityManager] " + string);
      }
    }
  }

}
