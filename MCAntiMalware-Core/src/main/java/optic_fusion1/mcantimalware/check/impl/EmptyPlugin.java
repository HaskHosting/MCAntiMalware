package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CacheContainer;
import optic_fusion1.mcantimalware.check.CheckResult;
import org.objectweb.asm.tree.ClassNode;

public class EmptyPlugin extends BaseCheck {

  public EmptyPlugin(Main main) {
    super(main);
  }

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    if (isPlugin(zipFile)) {
      return handlePlugin(rootFolder, zipFile, cache);
    }
    return new ArrayList<>();
  }

  private List<CheckResult> handlePlugin(Path rootFolder, Path zipFile, CacheContainer cache) {
    try {
      boolean noClassFiles = walkThroughFiles(rootFolder).filter(this::validClassPath).count() == 0;
      if (noClassFiles) {
        List<CheckResult> list = new ArrayList<>();
        list.add(new CheckResult("Spigot", "PUP", "EmptyPlugin"));
        return list;
      }

      boolean emptyMainClass = Files.walk(rootFolder).anyMatch((path) -> {
        if (validClassPath(path)) {
          ClassNode classNode = cache.fetchClass(path);
          if (classNode == null) {
            return false;
          }
          if (classNode.methods.isEmpty() && classNode.superName.contains("JavaPlugin")) {
            return true;
          }
          int emptyMainMethods = 0;
          if (classNode.methods.size() == 2) {
            emptyMainMethods = classNode.methods.stream().filter(methodNode -> (methodNode.instructions.size() == 4)).filter(methodNode -> (methodNode.name.equals("onEnable") || methodNode.name.equals("onDisable"))).map(_item -> 1).reduce(emptyMainMethods, Integer::sum);
            if (emptyMainMethods >= 2) {
              setClassNodePath(classNode.name);
              setSourceFilePath(classNode.sourceFile);
              return true;
            }
          }
        }
        return false;
      });
      if (emptyMainClass) {
        List<CheckResult> list = new ArrayList<>();
        list.add(new CheckResult("Spigot", "PUP", "EmptyPlugin", "A", getSourceFilePath(), getClassNodePath(), -1));
        return list;
      }
    } catch (IOException e) {
      LOGGER.exception(e);
    }
    return new ArrayList<>();
  }

}
