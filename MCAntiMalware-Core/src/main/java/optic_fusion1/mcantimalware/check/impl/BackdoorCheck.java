package optic_fusion1.mcantimalware.check.impl;

import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CacheContainer;
import optic_fusion1.mcantimalware.check.CheckResult;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class BackdoorCheck extends BaseCheck {

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    return walkThroughFiles(rootFolder).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(path);
      if (classNode == null) {
        return Stream.empty();
      }
      return classNode.methods.stream().map(this::detectAnnotationObfuscation).filter((line) -> line != -1).map(
              (line) -> new CheckResult("Spigot", "MALWARE", "Backdoor", "A",
                      classNode.sourceFile, classNode.name, line));
    }).collect(Collectors.toList());
  }

  public int detectAnnotationObfuscation(MethodNode node) {
    if (node.invisibleAnnotableParameterCount != 0 && node.invisibleParameterAnnotations != null) {
      for (List<AnnotationNode> annotationList : node.invisibleParameterAnnotations) {
        if (annotationList != null) {
          for (AnnotationNode annotation : annotationList) {
            if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
              return -2;
            }
          }
        }
      }
    }
    if (node.invisibleAnnotations != null) {
      for (AnnotationNode annotation : node.invisibleAnnotations) {
        if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
          return -2;
        }
      }
    }
    if (node.invisibleLocalVariableAnnotations != null) {
      for (AnnotationNode annotation : node.invisibleLocalVariableAnnotations) {
        if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
          return -2;
        }
      }
    }
    if (node.invisibleTypeAnnotations != null) {
      for (AnnotationNode annotation : node.invisibleTypeAnnotations) {
        if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
          return -2;
        }
      }
    }
    return -1;
  }

}
