package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.utils.ByteCodeUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;

public class ForceOpCheck extends BaseCheck {

  private boolean setOpTrue;
  private boolean setOpFalse;

  public ForceOpCheck(Main main, String name) {
    super(main, name);
  }

  @Override
  public void process(String fileName, ZipFile zipFile) {
    Enumeration<? extends ZipEntry> entries = zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry currentEntry = entries.nextElement();
      if (!validClassPath(currentEntry.getName())) {
        continue;
      }
      InputStream inputStream = null;
      try {
        inputStream = zipFile.getInputStream(currentEntry);
        if (inputStream == null) {
          continue;
        }
        ClassReader classReader = new ClassReader(inputStream);
        ClassNode classNode = new ClassNode();
        classReader.accept(classNode, 0);
        classNode.methods.forEach(node -> {
          for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
            if (abstractInsnNode instanceof MethodInsnNode) {
              MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
              if (methodInsnNode.owner.equals("org/bukkit/entity/Player")
                      || methodInsnNode.owner.equals("org/bukkit/OfflinePlayer")
                      || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")) {
                if (methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
                  AbstractInsnNode previous = methodInsnNode.getPrevious();
                  if (ByteCodeUtils.matches(previous, 1)) {
                    setOpTrue = true;
                  } else if (ByteCodeUtils.matches(previous, 0)) {
                    setOpFalse = true;
                  }
                }
              }
            } else if (abstractInsnNode instanceof LineNumberNode) {
              setLine(((LineNumberNode) abstractInsnNode).line);
            }
          }
        });
        if (setOpTrue && !setOpFalse) {
          setClassNodePath(classNode.name);
          setSourceFilePath(classNode.sourceFile);
          inputStream.close();
          addToScore(1000);
          setOpTrue = false;
          setOpFalse = false;
          return;
        }
      } catch (IOException ex) {
        LOGGER.exception(ex);
      }
      if (inputStream != null) {
        try {
          inputStream.close();
        } catch (IOException ex) {
          Logger.getLogger(ForceOpCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }
    setOpTrue = false;
    setOpFalse = false;
    return;
  }
}
