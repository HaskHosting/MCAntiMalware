package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.utils.Utils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;

public class Check extends BaseCheck {

  public Check(Main main, String name) {
    super(main, name);
  }

  @Override
  public void process(String filePath, ZipFile zipFile) {
    if (isPlugin(zipFile)) {
      handlePlugin(filePath, zipFile);
      return;
    }
    return;
  }

  private void handlePlugin(String filePath, ZipFile zipFile) {
    try {
      String path = filePath;
      if (isFileBlacklisted(path)) {
        return ;
      }
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      InputStream inputStream = null;
      while (entries.hasMoreElements()) {
        ZipEntry current = entries.nextElement();
        String currentName = current.getName();
        inputStream = zipFile.getInputStream(current);
        if (inputStream == null) {
          continue;
        }
        if (isPluginYmlFile(currentName) || isBungeeYmlFile(currentName)) {
          List<String> authors = Utils.getAuthors(YamlConfiguration.loadConfiguration(inputStream));
          for (String blacklistedAuthor : getBlacklistedAuthors()) {
            if (authors.contains(blacklistedAuthor)) {
              inputStream.close();
              setClassNodePath("plugin.yml");
              setLine(-1);
              setSourceFilePath("plugin.yml");
              addToScore(1000);
            }
          }
        }
        if (validClassPath(currentName)) {
          ClassReader reader = new ClassReader(inputStream);
          ClassNode classNode = new ClassNode();
          reader.accept(classNode, 0);
          for (String blacklistedClassNode : getBlacklistedClassPaths()) {
            if (classNode.name.contains(blacklistedClassNode)) {
              inputStream.close();
              setClassNodePath(classNode.name);
              setSourceFilePath(classNode.sourceFile);
              addToScore(1000);
            }
          }
          if (classNodeContainsBlacklistedWord(classNode, getBlacklistedStrings())) {
            inputStream.close();
            setClassNodePath(classNode.name);
            setSourceFilePath(classNode.sourceFile);
            addToScore(1000);
          }
        }
      }
      if (inputStream != null) {
        try {
          inputStream.close();
        } catch (IOException ex) {
          LOGGER.exception(ex);
        }
      }
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
    return;
  }

}
