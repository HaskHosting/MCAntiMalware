package optic_fusion1.antimalware;

import java.io.File;
import optic_fusion1.antimalware.check.CheckManager;
import optic_fusion1.antimalware.check.CheckRegistery;
import optic_fusion1.antimalware.database.Database;
import optic_fusion1.antimalware.logging.CustomLogger;
import optic_fusion1.antimalware.metrics.MetricsManager;
import optic_fusion1.antimalware.metrics.metric.JVMMetric;
import optic_fusion1.antimalware.metrics.metric.MemoryMetric;
import optic_fusion1.antimalware.notifications.NotificationHandler;
import optic_fusion1.antimalware.scanner.Scanner;
import optic_fusion1.antimalware.scanner.USBDriveScanner;
import optic_fusion1.antimalware.scanner.realtime.RealTimeScanner;
import optic_fusion1.antimalware.servers.handler.PlayerBanHandler;
import optic_fusion1.antimalware.servers.handler.ServerHandler;
import optic_fusion1.antimalware.updater.Updater;
import optic_fusion1.antimalware.utils.I18n;

public class AntiMalware extends Thread {

  public static final CustomLogger LOGGER = new CustomLogger();
  private static final Database DATABASE = new Database();
  private static final CheckManager CHECK_MANAGER = new CheckManager();
  private static AntiMalware instance;
  private CommandLineParser parser;
  private NotificationHandler notifHandler;
  private MetricsManager metrics;
  private Scanner scanner;
  private ServerHandler serverHandler;

  public AntiMalware(String[] args) {
    setName("AntiMalware/Main");
    (parser = new CommandLineParser()).parseArguments(args);
    instance = this;
  }

  @Override
  public void run() {
    init();
  }

  private void init() {
    LOGGER.info(I18n.tl("initializing_start"));
    LOGGER.info(I18n.tl("github_issues"));
    notifHandler = new NotificationHandler(parser.getNotificationType());
    if (parser.shouldUseMetrics()) {
      (metrics = new MetricsManager(this)).registerMetrics(new JVMMetric(), new MemoryMetric()).start();
    }
    notifHandler = new NotificationHandler(parser.getNotificationType());
    if (parser.shouldBanMaliciousAuthors() && new File("banned-players.json").exists()) {
      new PlayerBanHandler();
    }
    new CheckRegistery(this).registerChecks();
    if (parser.singleScan() || parser.shouldScanSingleFile()) {
      scanner = new RealTimeScanner(this, parser.getScanDirectory());
      if (parser.shouldScanSingleFile()) {
        scanner.addFileToQueue(parser.getScanFile().toPath());
      } else {
        scanner.scanFiles();
      }
      return;
    } else {
      scanner = new RealTimeScanner(this, parser.getScanDirectory());
    }
    if (!parser.shouldDisableAutoUpdate()) {
      LOGGER.info(I18n.tl("setup_auto_update"));
      new Updater(this).start();
    }
    if (parser.shouldRunServerJar()) {
      serverHandler = ServerHandler.getServerHandler(this);
      if (serverHandler != null) {
        serverHandler.handleServer();
        LOGGER.info(I18n.tl("server_type", serverHandler.getServerTypeName()));
      }
    }
    if (parser.shouldScanDrives()) {
      new USBDriveScanner(this);
    }
    ((RealTimeScanner) scanner).setupDirectoryWatcher();
    LOGGER.info(I18n.tl("initializing_end"));
  }

  public NotificationHandler getNotificationHandler() {
    return notifHandler;
  }

  public MetricsManager getMetricsManager() {
    return metrics;
  }

  public CommandLineParser getCommandLineParser() {
    return parser;
  }

  public Database getDatabase() {
    return DATABASE;
  }

  public static AntiMalware getInstance() {
    return instance;
  }

  public Scanner getScanner() {
    return scanner;
  }

  public CheckManager getCheckManager() {
    return CHECK_MANAGER;
  }

  public ServerHandler getServerHandler() {
    return serverHandler;
  }

}
