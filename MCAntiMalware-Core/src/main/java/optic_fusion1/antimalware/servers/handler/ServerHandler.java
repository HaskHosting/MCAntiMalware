package optic_fusion1.antimalware.servers.handler;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import net.bytebuddy.dynamic.ClassFileLocator;
import optic_fusion1.antimalware.AntiMalware;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.CommandLineParser;
import optic_fusion1.antimalware.scanner.Scanner;
import optic_fusion1.antimalware.servers.handler.paper.PaperServerHandler;
import optic_fusion1.antimalware.servers.handler.spigot.SpigotServerHandler;
import optic_fusion1.antimalware.servers.runtimeprotect.AMSecurityManager;
import optic_fusion1.antimalware.servers.runtimeprotect.PluginIndex;
import optic_fusion1.antimalware.servers.transformers.Transformers;
import optic_fusion1.antimalware.utils.I18n;

public abstract class ServerHandler {

  private static final List<ServerHandler> HANDLERS = new ArrayList<>();

  static {
    HANDLERS.add(new PaperServerHandler());
    HANDLERS.add(new SpigotServerHandler());
  }

  private AntiMalware antiMalware;
  private CommandLineParser clp;
  private Scanner scanner;
  private boolean canUseSpigotMethods;
  private PluginIndex pluginIndex;

  public static ServerHandler getServerHandler(AntiMalware antiMalware) {
    for (ServerHandler handler : HANDLERS) {
      handler.setAntiMalware(antiMalware);
      if (handler.checkServerType(antiMalware.getCommandLineParser().getServerJar())) {
        return handler;
      }
    }
    return null;
  }

  public abstract String getServerTypeName();

  protected abstract boolean checkServerType(File serverFile);

  protected abstract boolean prepareServer();

  protected abstract void startServer();

  protected String[] getServerArguments() {
    return clp.getServerArguments();
  }

  protected File getServerFile() {
    return clp.getServerJar();
  }

  protected ClassLoader createClassLoader(URL... urls) {
    return new URLClassLoader(urls, ClassLoader.getSystemClassLoader());
  }

  protected void applyTransformers(ClassLoader classLoader, File jarFile, String version) {
    LOGGER.info(I18n.tl("security_manager_transformers_load_start"));
    try {
      Transformers.applyTransformers(classLoader, ClassFileLocator.ForJarFile.of(jarFile), version);
    } catch (IOException e) {
      LOGGER.exception(e);
      System.exit(1);
      return;
    }
    LOGGER.info(I18n.tl("security_manager_transformers_load_end"));
  }

  protected Thread createChildProcess(ClassLoader classLoader, String className, String methodName,
          Class<?>[] argumentTypes, Object[] args) {
    Thread serverThread = new Thread(() -> {
      try {
        Thread.currentThread().setContextClassLoader(classLoader);
        LOGGER.info(I18n.tl("security_manager_setup_start"));
        classLoader.loadClass(className).getMethod(methodName, argumentTypes).invoke(null, args);
      } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
              | SecurityException | ClassNotFoundException e) {
        LOGGER.exception(e);
      }
    });
    serverThread.start();
    return serverThread;
  }

  protected boolean setSecurityManager(SecurityManager sm) {
    LOGGER.info(I18n.tl("security_manager_setup_start"));
    try {
      System.setSecurityManager(sm);
    } catch (SecurityException se) {
      LOGGER.exception(se);
      return false;
    }
    LOGGER.info(I18n.tl("security_manager_setup_end"));
    return true;
  }

  public void handleServer() {
    if (clp.shouldRunServerJar()) {
      File serverJar = clp.getServerJar();
      scanner.addFileToQueue(serverJar.toPath());
      if (!prepareServer()) {
        LOGGER.info(I18n.tl("security_manager_server_setup_error"));
        System.exit(0);
      }
      if (clp.shouldRunSecurityManager()) {
        if (!setSecurityManager(new AMSecurityManager(antiMalware))) {
          LOGGER.info(I18n.tl("security_manager__setup_error"));
          System.exit(0);
        }
      }
      startServer();
    }
  }

  public void setAntiMalware(AntiMalware antiMalware) {
    clp = antiMalware.getCommandLineParser();
    scanner = antiMalware.getScanner();
    this.antiMalware = antiMalware;
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public boolean canUseSpigotMethods() {
    return canUseSpigotMethods;
  }

  public void setCanUseSpigotMethods(boolean canUseSpigotMethods) {
    this.canUseSpigotMethods = canUseSpigotMethods;
  }

  public CommandLineParser getCommandLineParser() {
    return clp;
  }

}
