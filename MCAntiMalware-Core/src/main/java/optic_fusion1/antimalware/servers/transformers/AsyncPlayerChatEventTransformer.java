/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.transformers;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Callable;
import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import net.bytebuddy.implementation.bind.annotation.This;
import optic_fusion1.antimalware.AntiMalware;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;
import static optic_fusion1.antimalware.utils.I18n.tl;

public final class AsyncPlayerChatEventTransformer {

  private AsyncPlayerChatEventTransformer() {
  }

  public static void setMessage(@SuperCall Callable method) {
    Transformers.a(method);
  }

  public static void setCancelled(@This Object object, @SuperCall Callable method, @Argument(0) boolean cancel) {
    if (cancel) {
      try {
        String message = (String) object.getClass().getMethod("getMessage").invoke(object);
        String player = getPlayerName(object);
        // TODO: Improve this check
        CacheContainer cache = AntiMalware.getInstance().getCache();
        if (cache.containsBlacklistedCommand(message) || cache.containsBlacklistedString(message)
                || cache.containsBlacklistedString(message.split(" ")[0])
                || cache.containsBlacklistedCommand(message.split(" ")[0])) {
          CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
          if (callerInfo != null) {
            throw new FormattedSecurityException(tl("transformer_blacklisted_word",
                    callerInfo.getPlugin().getJar(), player, message));
          }
          throw new FormattedSecurityException(tl("transformer_blacklisted_word_no_file", getPlayerName(object), message));
        }
        LOGGER.info(player + " said " + message + " (Cancelled Event)");
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      method.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static String getPlayerName(Object object) throws IllegalAccessException, IllegalArgumentException,
          InvocationTargetException, NoSuchMethodException, SecurityException {
    Object player = object.getClass().getMethod("getPlayer").invoke(object);
    return (String) player.getClass().getMethod("getDisplayName").invoke(player);
  }

}
