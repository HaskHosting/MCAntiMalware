package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.utils.ByteCodeUtils;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class ForceOpCheck extends BaseCheck {

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    return walkThroughFiles(rootFolder).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(path);
      if (classNode == null) {
        return Stream.empty();
      }
      return classNode.methods.stream().map(this::detectForceOP).filter((line) -> line != -1).map(
              (line) -> new CheckResult("Spigot", "MALWARE", "ForceOP", "A", classNode.sourceFile, classNode.name,
                      line));
    }).collect(Collectors.toList());
  }

  // TODO: Look for other ways to detect force-ops
  public int detectForceOP(MethodNode node) {
    boolean setOpTrue = false;
    boolean setOpFalse = false;

    int curLine = -1;
    int foundLine = -1;

    for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
      if (abstractInsnNode instanceof MethodInsnNode) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        if (methodInsnNode.owner.equals("org/bukkit/entity/Player")
                || methodInsnNode.owner.equals("org/bukkit/OfflinePlayer")
                || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")) {
          if (methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
            AbstractInsnNode previous = methodInsnNode.getPrevious();
            if (previous.getOpcode() == Opcodes.IALOAD) {
              if (ByteCodeUtils.matches(previous.getPrevious(), 1)) {
                setOpTrue = true;
                foundLine = 2;
              }
            }
            if (ByteCodeUtils.matches(previous, 1)) {
              setOpTrue = true;
              foundLine = curLine;
            } else if (ByteCodeUtils.matches(previous, 0)) {
              setOpFalse = true;
            }

          }
        }
      } else if (abstractInsnNode instanceof LineNumberNode) {
        curLine = ((LineNumberNode) abstractInsnNode).line;
      }
    }
    if (setOpTrue && !setOpFalse) {
      return foundLine;
    }
    return -1;
  }

}
