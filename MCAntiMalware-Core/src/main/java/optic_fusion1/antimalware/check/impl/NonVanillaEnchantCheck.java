package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.IntInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class NonVanillaEnchantCheck extends BaseCheck {

  private static final HashMap<String, Integer> ENCHANTMENT_MAX_LEVELS = new HashMap<>();

  public NonVanillaEnchantCheck() {
    ENCHANTMENT_MAX_LEVELS.put("PROTECTION_ENVIRONMENTAL", 4);
    ENCHANTMENT_MAX_LEVELS.put("PROTECTION_FIRE", 4);
    ENCHANTMENT_MAX_LEVELS.put("PROTECTION_FALL", 4);
    ENCHANTMENT_MAX_LEVELS.put("PROTECTION_EXPLOSIONS", 4);
    ENCHANTMENT_MAX_LEVELS.put("PROTECTION_PROJECTILE", 4);
    ENCHANTMENT_MAX_LEVELS.put("OXYGEN", 3);
    ENCHANTMENT_MAX_LEVELS.put("WATER_WORKER", 1);
    ENCHANTMENT_MAX_LEVELS.put("THORNS", 3);
    ENCHANTMENT_MAX_LEVELS.put("DEPTH_STRIDER", 3);
    ENCHANTMENT_MAX_LEVELS.put("FROST_WALKER", 2);
    ENCHANTMENT_MAX_LEVELS.put("BINDING_CURSE", 1);
    ENCHANTMENT_MAX_LEVELS.put("DAMAGE_ALL", 5);
    ENCHANTMENT_MAX_LEVELS.put("DAMAGE_UNDEAD", 5);
    ENCHANTMENT_MAX_LEVELS.put("DAMAGE_ARTHROPODS", 5);
    ENCHANTMENT_MAX_LEVELS.put("KNOCKBACK", 2);
    ENCHANTMENT_MAX_LEVELS.put("FIRE_ASPECT", 2);
    ENCHANTMENT_MAX_LEVELS.put("LOOT_BONUS_MOBS", 3);
    ENCHANTMENT_MAX_LEVELS.put("SWEEPING_EDGE", 3);
    ENCHANTMENT_MAX_LEVELS.put("DIG_SPEED", 5);
    ENCHANTMENT_MAX_LEVELS.put("SILK_TOUCH", 1);
    ENCHANTMENT_MAX_LEVELS.put("DURABILITY", 3);
    ENCHANTMENT_MAX_LEVELS.put("LOOT_BONUS_BLOCKS", 3);
    ENCHANTMENT_MAX_LEVELS.put("ARROW_DAMAGE", 6);
    ENCHANTMENT_MAX_LEVELS.put("ARROW_KNOCKBACK", 2);
    ENCHANTMENT_MAX_LEVELS.put("ARROW_FIRE", 1);
    ENCHANTMENT_MAX_LEVELS.put("ARROW_INFINITE", 1);
    ENCHANTMENT_MAX_LEVELS.put("LUCK", 3);
    ENCHANTMENT_MAX_LEVELS.put("LURE", 3);
    ENCHANTMENT_MAX_LEVELS.put("LOYALTY", 3);
    ENCHANTMENT_MAX_LEVELS.put("IMPALING", 5);
    ENCHANTMENT_MAX_LEVELS.put("RIPTIDE", 3);
    ENCHANTMENT_MAX_LEVELS.put("CHANNELING", 1);
    ENCHANTMENT_MAX_LEVELS.put("MULTISHOT", 1);
    ENCHANTMENT_MAX_LEVELS.put("QUICK_CHARGE", 3);
    ENCHANTMENT_MAX_LEVELS.put("PIERCING", 4);
    ENCHANTMENT_MAX_LEVELS.put("MENDING", 1);
    ENCHANTMENT_MAX_LEVELS.put("VANISHING_CURSE", 1);
    ENCHANTMENT_MAX_LEVELS.put("SOUL_SPEED", 3);
  }

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    return walkThroughFiles(rootFolder).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(zipFile, path);
      if (classNode == null) {
        return Stream.empty();
      }
      return classNode.methods.stream().map(this::hasNonVanillaEnchant).filter((line) -> line != -1).map(
              (line) -> new CheckResult("Spigot", "MALWARE", "Non-Vanilla Enchantment", "A", classNode.sourceFile,
                      classNode.name,
                      line));
    }).collect(Collectors.toList());
  }

  private int hasNonVanillaEnchant(MethodNode method) {
    int curLine = -1;
    int foundLine = -1;

    for (AbstractInsnNode abstractInsnNode : method.instructions) {
      if (abstractInsnNode instanceof MethodInsnNode) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        if (methodInsnNode.owner.equals("org/bukkit/inventory/meta/ItemMeta") && methodInsnNode.name.equals("addEnchant")
                && methodInsnNode.desc.equals("(Lorg/bukkit/enchantments/Enchantment;IZ)Z")) {
          AbstractInsnNode enchantLevelNode = (AbstractInsnNode) methodInsnNode.getPrevious().getPrevious();
          int enchantLevel = 1;
          if (enchantLevelNode instanceof IntInsnNode) {
            enchantLevel = ((IntInsnNode) enchantLevelNode).operand;
          }
          FieldInsnNode enchantNameNode = (FieldInsnNode) enchantLevelNode.getPrevious();
          if (enchantLevel > ENCHANTMENT_MAX_LEVELS.get(enchantNameNode.name)) {
            foundLine = curLine;
          }
        }
      } else if (abstractInsnNode instanceof LineNumberNode) {
        curLine = ((LineNumberNode) abstractInsnNode).line;
      }
    }
    return foundLine;
  }

}
