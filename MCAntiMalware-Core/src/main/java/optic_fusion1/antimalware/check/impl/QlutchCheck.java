package optic_fusion1.antimalware.check.impl;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.apache.commons.codec.binary.Base64;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class QlutchCheck extends BaseCheck {

  private CacheContainer cache;

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    this.cache = cache;
    List<CheckResult> results = walkThroughFiles(rootFolder).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(zipFile, path);
      if (classNode == null) {
        return Stream.empty();
      }
      return classNode.methods.stream().map(this::detect).filter((line) -> line != -1).map(
              (line) -> new CheckResult("Spigot", "MALWARE", "Qlutch", "A",
                      classNode.sourceFile, classNode.name, line));
    }).collect(Collectors.toList());
    if (zipFile.endsWith("VaultLib.jar")) {
      results.add(new CheckResult("Spigot", "MALWARE", "Qlutch", "C"));
    }
    try {
      if (Files.isHidden(rootFolder)) {
        LOGGER.info("Found hidden file '" + rootFolder + "' probably malicious");
        results.add(new CheckResult("Spigot", "MALWARE", "Qlutch", "B"));
      }
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
    return results;
  }

  public int detect(MethodNode node) {
    for (AbstractInsnNode insnNode : node.instructions.toArray()) {
      if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
        int i = decodeBase64(((LdcInsnNode) insnNode).cst.toString());
        if (i == 1) {
          return 1;
        }
      }
    }
    return -1;
  }

  private int decodeBase64(String string) {
    if (string.isBlank() || string.isEmpty()) {
      return -1;
    }
    if (Base64.isBase64(string)) {
      String decoded = new String(Base64.decodeBase64(string));
      if (decoded.equalsIgnoreCase("https://api.minecraftforceop.com/download.php?port=")
              || decoded.equalsIgnoreCase("https://api.minecraftforceop.com/name.php")
              || cache.containsBlacklistedString(decoded)
              || cache.containsBlacklistedCommand(decoded)
              || cache.containsBlacklistedWebsite(decoded)
              || cache.containsBlacklistedAuthor(decoded)) {
        return 1;
      }
      if (Base64.isBase64(decoded)) {
        decodeBase64(decoded);
      }
    }
    return -1;
  }
}
