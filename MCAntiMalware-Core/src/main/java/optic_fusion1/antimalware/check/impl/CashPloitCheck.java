/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.apache.commons.io.IOUtils;

public class CashPloitCheck extends BaseCheck {

  private static final Base64.Decoder DECODER = Base64.getDecoder();

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer classCache) {
    if (isCashploitData(getInfoClass(zipFile))) {
      List<CheckResult> list = new ArrayList<>();
      list.add(new CheckResult("Spigot", "MALWARE", "CashPloit"));
      return list;
    }
    return new ArrayList<>();
  }

  private byte[] getInfoClass(Path rootFolder) {
    try {
      Optional<Path> infoClassPath = walkThroughFiles(rootFolder)
              .filter((path) -> path.getFileName().toString().equals("info.class")).findAny();
      if (infoClassPath.isPresent()) {
        return IOUtils.toByteArray(Files.newInputStream(infoClassPath.get()));
      }
    } catch (IOException e) {
      LOGGER.exception(e);
    }
    return null;
  }

  private boolean isCashploitData(byte[] content) {
    if (content == null) {
      return false;
    }
    try {
      DECODER.decode(DECODER.decode(DECODER.decode(content)));
      return true;
    } catch (Exception ex) {
      LOGGER.exception(ex);
    }
    return false;
  }
}
