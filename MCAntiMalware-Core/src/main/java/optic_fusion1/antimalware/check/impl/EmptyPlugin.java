/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

public class EmptyPlugin extends BaseCheck {

  @Override
  public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
    if (isPlugin(zipFile)) {
      return handlePlugin(classNode, zipFile, cache);
    }
    return new ArrayList<>();
  }

  private List<CheckResult> handlePlugin(ClassNode classNode, Path zipFile, CacheContainer cache) {
    if (classNode.methods.isEmpty() && classNode.superName.contains("JavaPlugin")) {
      List<CheckResult> list = new ArrayList<>();
      list.add(new CheckResult("Spigot", "PUP", "EmptyPlugin", "A", classNode.name, classNode.sourceFile, -1));
      return list;
    }
    if (classNode.methods.size() == 1) {
      for (MethodNode method : classNode.methods) {
        if (method.instructions.size() == 4 && method.name.equals("onEnable")) {
          setClassNodePath(classNode.name);
          setSourceFilePath(classNode.sourceFile);
          List<CheckResult> list = new ArrayList<>();
          list.add(new CheckResult("Spigot", "PUP", "EmptyPlugin", "A", classNode.name, classNode.sourceFile, -1));
          return list;
        }
      }
    }
    return new ArrayList<>();
  }

}
