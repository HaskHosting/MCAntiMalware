package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.VarInsnNode;

// TODO: Fix ClassCastException
public class CrasherCheck extends BaseCheck {

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    return walkThroughFiles(rootFolder).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(path);
      if (classNode == null) {
        return Stream.empty();
      }
      return classNode.methods.stream().map(this::detectCrasher).filter((line) -> line != -1).map(
              (line) -> new CheckResult("Spigot", "MALWARE", "Crasher", "A", classNode.sourceFile, classNode.name,
                      line));
    }).collect(Collectors.toList());
  }

  public int detectCrasher(MethodNode node) {
    int curLine = -1;
    try {
      for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
        if (abstractInsnNode instanceof MethodInsnNode) {
          MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
          // Variant A
          if (methodInsnNode.owner.equals("org/bukkit/entityPlayer")) {
            if (methodInsnNode.name.equals("setHealthScale") && methodInsnNode.desc.equals("(D)V")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Double) {
                  double d = (Double) ldcNode.cst;
                  if (d == Double.MAX_VALUE) {
                    return curLine;
                  }
                  return -1;
                }
                float f = (Float) ldcNode.cst;
                if (f == Float.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
            }
          }
          // Variant B
          if (methodInsnNode.owner.equals("java/lang/Thread")
                  || methodInsnNode.owner.equals("java/util/concurrent/TimeUnit")) {
            if (methodInsnNode.name.equals("sleep") && methodInsnNode.desc.equals("(J)V")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Long) {
                  long l = (Long) ldcNode.cst;
                  if (l == 9223372036854775807l) {
                    return curLine;
                  }
                }
              }
            }
          }
          // Variant C
          if (methodInsnNode.owner.equals("org/bukkit/Bukkit")) {
            if (methodInsnNode.name.equals("createInventory") && methodInsnNode.desc.equals("(Lorg/bukkit/inventory/InventoryHolder;I)Lorg/bukkit/inventory/Inventory;")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                int i = (int) ldcNode.cst;
                if (i == 1152000) {
                  return curLine;
                }
              }
            }
          }
          // Variant D
          if (methodInsnNode.owner.equals("org/bukkit/World")) {
            if (methodInsnNode.name.equals("createExplosion")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Double) {
                  double d = (Double) ldcNode.cst;
                  if (d == Double.MAX_VALUE) {
                    return curLine;
                  }
                  return -1;
                }
                float f = (Float) ldcNode.cst;
                if (f == Float.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
            }
          }
          // Variant E
          if (methodInsnNode.owner.startsWith("net/minecraft/server/")
                  && methodInsnNode.owner.endsWith("PacketPlayOutExplosion")) {
            MethodInsnNode method = (MethodInsnNode) methodInsnNode.getPrevious();
            if (method.owner.startsWith("net/minecraft/server") && method.owner.endsWith("Vec3D")) {
              LdcInsnNode ldcNode = (LdcInsnNode) method.getPrevious();
              if (ldcNode.cst instanceof Double) {
                double d = (Double) ldcNode.cst;
                if (d == Double.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
              float f = (Float) ldcNode.cst;
              if (f == Float.MAX_VALUE) {
                return curLine;
              }
              return -1;
            }
          }
        } else if (abstractInsnNode instanceof LineNumberNode) {
          curLine = ((LineNumberNode) abstractInsnNode).line;
        }
      }
    } catch (Exception e) {
      LOGGER.exception(e);
    }
    return -1;
  }

}
