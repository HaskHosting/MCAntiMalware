/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Stream;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.utils.StringUtils;

public abstract class BaseCheck {

  private String classNodePath = "";
  private String sourceFilePath = "";
  private int line = -1;

  public abstract List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache);

  // TODO: Look into re-writing this method. There's gonna be a better way of handling this.
  protected Stream<Path> walkThroughFiles(Path dir) {
    try {
      if (dir.getFileName() != null && dir.getFileName().toString().equals(".")) {
        return Stream.of();
      } else if (Files.isDirectory(dir, LinkOption.NOFOLLOW_LINKS)) {
        try {
          return Files.list(dir).filter(path -> !Files.isSymbolicLink(path)).flatMap(this::walkThroughFiles);
        } catch (IOException e) {
          LOGGER.exception(e);
          return Stream.of();
        }
      } else if (Files.isSymbolicLink(dir)) {
        return Stream.of();
      } else {
        return Stream.of(dir);
      }
    } catch (StackOverflowError ex) {
      LOGGER.severe("StackOverflow caused by " + dir);
    }
    return Stream.of();
  }

  public boolean isPlugin(Path rootDir) {
    return Files.exists(rootDir.resolve("plugin.yml")) || Files.exists(rootDir.resolve("bungee.yml"));
  }

  public boolean isBungeeYmlFile(String fileName) {
    return fileName.equals("bungee.yml");
  }

  public boolean isPluginYmlFile(String fileName) {
    return fileName.equals("plugin.yml");
  }

  public boolean isTextFile(String fileName) {
    return fileName.endsWith(".yml") || fileName.endsWith(".txt");
  }

  public void setClassNodePath(String string) {
    this.classNodePath = string;
  }

  public void setSourceFilePath(String sourceFilePath) {
    if (!StringUtils.isBlank(sourceFilePath)) {
      this.sourceFilePath = sourceFilePath;
    }
  }

  public void setLine(int line) {
    this.line = line;
  }

  public String getClassNodePath() {
    return classNodePath;
  }

  public String getSourceFilePath() {
    return sourceFilePath;
  }

  public int getLine() {
    return line;
  }

  public boolean validClassPath(Path classPath) {
    return classPath.toString().endsWith(".class") && !classPath.toString().contains("__MACOSX");
  }

  public void reset() {
    classNodePath = "";
    sourceFilePath = "";
    line = -1;
  }

}
