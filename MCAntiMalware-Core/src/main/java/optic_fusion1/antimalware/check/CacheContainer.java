package optic_fusion1.antimalware.check;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.configuration.file.YamlConfiguration;
import optic_fusion1.antimalware.database.Database;
import static optic_fusion1.antimalware.utils.I18n.tl;
import org.apache.commons.codec.digest.DigestUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;

// TODO: Cache anything else from the database that would get called a lot
public class CacheContainer {

  private final Map<Path, ClassNode> cachedClasses = new HashMap<>();
  private final Map<Path, YamlConfiguration> cachedConfigurations = new HashMap<>();
  private final Map<Path, String> cachedHashes = new HashMap<>();
  private HashSet<String> blacklistedClasspaths;
  private HashSet<String> blacklistedStrings;
  private HashSet<String> blacklistedAuthors;
  private HashSet<String> blacklistedWebsites;

  public CacheContainer(Database database) {
    try {
      blacklistedClasspaths = database.getBlacklistedClasspaths();
      blacklistedStrings = database.getBlacklistedStrings();
      blacklistedAuthors = database.getBlacklistedAuthors();
      blacklistedWebsites = database.getBlacklistedWebsites();
    } catch (SQLException ex) {
      LOGGER.exception(ex);
    }
  }

  public ClassNode fetchClass(Path path) {
    try {
      if (!cachedClasses.containsKey(path)) {
        loadClass(path);
      }
      return cachedClasses.get(path);
    } catch (Exception e) {
      return null;
    }
  }

  private void loadClass(Path path) {
    try {
      ClassReader classReader = new ClassReader(Files.newInputStream(path));
      ClassNode classNode = new ClassNode();
      classReader.accept(classNode, 0);
      cachedClasses.put(path, classNode);
    } catch (IOException e) {
      LOGGER.warn(tl("couldnt_read_class", path.toUri().toString()));
      cachedClasses.put(path, null);
    }
  }

  public YamlConfiguration fetchConfiguration(Path path) {
    if (!cachedConfigurations.containsKey(path)) {
      loadConfiguration(path);
    }
    return cachedConfigurations.get(path);
  }

  private void loadConfiguration(Path path) {
    try {
      cachedConfigurations.put(path, YamlConfiguration.loadConfiguration(Files.newInputStream(path)));
    } catch (IOException e) {
      cachedConfigurations.put(path, null);
    }
  }

  public String fetchSHA1(Path path) {
    if (!cachedHashes.containsKey(path)) {
      loadSHA1(path);
    }
    return cachedHashes.get(path);
  }

  public void loadSHA1(Path path) {
    try {
      cachedHashes.put(path, DigestUtils.sha1Hex(Files.newInputStream(path)));
    } catch (IOException e) {
      cachedHashes.put(path, "");
    }
  }

  public boolean containsBlacklistedAuthor(String author) {
    return blacklistedAuthors.contains(author);
  }

  public boolean containsBlacklistedWebsite(String website) {
    return blacklistedWebsites.contains(website);
  }

  public HashSet<String> getBlacklistedClassPaths() {
    return blacklistedClasspaths;
  }

  public HashSet<String> getBlacklistedStrings() {
    return blacklistedStrings;
  }

}
