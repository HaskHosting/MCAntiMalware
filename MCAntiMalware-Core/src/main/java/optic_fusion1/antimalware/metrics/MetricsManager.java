package optic_fusion1.antimalware.metrics;

import com.influxdb.client.InfluxDBClient;
import com.influxdb.client.InfluxDBClientFactory;
import com.influxdb.client.WriteApi;
import com.influxdb.client.domain.WritePrecision;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.CommandLineParser;
import optic_fusion1.antimalware.metrics.metric.Metric;

public class MetricsManager {

  private static final List<Metric> METRICS = new ArrayList<>();
  private static final ScheduledExecutorService EXECUTOR = Executors.newScheduledThreadPool(1);
  private InfluxDBClient client;
  private int interval;
  private char[] token;
  private String org;
  private String bucket;
  private String url;
  private AntiMalware antiMalware;

  public MetricsManager(AntiMalware antiMalware) {
    this.antiMalware = antiMalware;
    CommandLineParser clp = antiMalware.getCommandLineParser();
    interval = clp.getMetricsInterval();
    token = clp.getMetricsToken();
    org = clp.getMetricsOrg();
    bucket = clp.getMetricsBucket();
    url = clp.getMetricsUrl();
  }

  public void start() {
    client = InfluxDBClientFactory.create(url, token, org, bucket);
    WriteApi api = client.getWriteApi();
    EXECUTOR.scheduleAtFixedRate(() -> {
      METRICS.forEach(metric -> {
        api.writeMeasurement(WritePrecision.MS, metric.getMeasurement(antiMalware));
      });
    }, 0, interval, TimeUnit.SECONDS);
  }

  public List<Metric> getMetrics() {
    return Collections.unmodifiableList(METRICS);
  }

  public MetricsManager registerMetrics(Metric... metrics) {
    METRICS.addAll(Arrays.asList(metrics));
    return this;
  }

}
