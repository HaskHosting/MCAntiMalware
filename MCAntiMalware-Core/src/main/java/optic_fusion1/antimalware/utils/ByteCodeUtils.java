/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.utils;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.IntInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;

public final class ByteCodeUtils implements Opcodes {

  private ByteCodeUtils() {
  }

  public static boolean matches(AbstractInsnNode node, int value) {
    int opCode = node.getOpcode();
    if (opCode == ICONST_0 && value == 0
            || opCode == ICONST_1 && value == 1
            || opCode == ICONST_2 && value == 2
            || opCode == ICONST_3 && value == 3
            || opCode == ICONST_4 && value == 4
            || opCode == ICONST_5 && value == 5) {
      return true;
    }
    if (opCode == BIPUSH || opCode == SIPUSH) {
      return ((IntInsnNode) node).operand == value;
    } else if (node.getOpcode() == LDC) {
      Object cst = ((LdcInsnNode) node).cst;
      return cst instanceof Integer && cst.equals(value);
    }
    return false;
  }
}
