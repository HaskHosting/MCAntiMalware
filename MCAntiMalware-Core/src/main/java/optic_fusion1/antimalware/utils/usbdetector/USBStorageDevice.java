/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector;

import java.io.File;
import static optic_fusion1.antimalware.utils.I18n.tl;

public class USBStorageDevice {

  private final File rootDirectory;
  private final String deviceName;
  private final String device;
  private final String uuid;

  public USBStorageDevice(final File rootDirectory, String deviceName, final String device, final String uuid) {
    if (rootDirectory == null || !rootDirectory.isDirectory()) {
      throw new IllegalArgumentException(tl("usb_detector_invalid_root_file"));
    }

    this.rootDirectory = rootDirectory;

    if (deviceName == null || deviceName.isEmpty()) {
      deviceName = rootDirectory.getName();
    }
    this.device = device;
    this.deviceName = deviceName;
    this.uuid = uuid;
  }

  public boolean canRead() {
    return rootDirectory.canRead();
  }

  public boolean canWrite() {
    return rootDirectory.canWrite();
  }

  public boolean canExecute() {
    return rootDirectory.canExecute();
  }

  public String getSystemDisplayName() {
    String driveLetter = rootDirectory.getPath();
    if (driveLetter.endsWith("\\")) {
      driveLetter = driveLetter.substring(0, driveLetter.length() - 1);
    }
    return deviceName + " (" + driveLetter + ")";
  }

  public File getRootDirectory() {
    return rootDirectory;
  }

  public String getDeviceName() {
    return deviceName;
  }

  public String getDevice() {
    return device;
  }

  public String getUuid() {
    return uuid;
  }

}
