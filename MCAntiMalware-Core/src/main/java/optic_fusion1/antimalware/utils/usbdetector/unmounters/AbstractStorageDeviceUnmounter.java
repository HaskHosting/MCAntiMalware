/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * Copyright 2019 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.unmounters;

import java.io.IOException;
import optic_fusion1.antimalware.utils.usbdetector.USBStorageDevice;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.LINUX;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.MAC_OS;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.WINDOWS;
import optic_fusion1.antimalware.utils.usbdetector.utils.OSUtils;

public abstract class AbstractStorageDeviceUnmounter {

  private static AbstractStorageDeviceUnmounter instance;

  public static synchronized AbstractStorageDeviceUnmounter getInstance() {
    if (instance == null) {
      switch (OSUtils.getOsType()) {
        case WINDOWS:
          instance = new WindowsStorageDeviceUnmounter();
          break;

        case LINUX:
          instance = new LinuxStorageDeviceUnmounter();
          break;

        case MAC_OS:
          instance = new OSXStorageDeviceUnmounter();
          break;
      }
    }

    return instance;
  }

  public abstract void unmount(USBStorageDevice usbStorageDevice) throws IOException;

}
