package optic_fusion1.antimalware.configuration;

import java.util.Map;
import optic_fusion1.antimalware.utils.Utils;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

//TODO: Make all of these translatable
public class MemoryConfiguration extends MemorySection implements Configuration {

  protected Configuration defaults;
  protected MemoryConfigurationOptions options;

  public MemoryConfiguration() {
  }

  public MemoryConfiguration(@Nullable Configuration defaults) {
    this.defaults = defaults;
  }

  @Override
  public void addDefault(@NotNull String path, @Nullable Object value) {
    Utils.notNull(path, "Path may not be null");

    if (defaults == null) {
      defaults = new MemoryConfiguration();
    }

    defaults.set(path, value);
  }

  @Override
  public void addDefaults(@NotNull Map<String, Object> defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    defaults.entrySet().forEach((entry) -> {
      addDefault(entry.getKey(), entry.getValue());
    });
  }

  @Override
  public void addDefaults(@NotNull Configuration defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    addDefaults(defaults.getValues(true));
  }

  @Override
  public void setDefaults(@NotNull Configuration defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    this.defaults = defaults;
  }

  @Nullable
  @Override
  public Configuration getDefaults() {
    return defaults;
  }

  @Nullable
  @Override
  public ConfigurationSection getParent() {
    return null;
  }

  @NotNull
  @Override
  public MemoryConfigurationOptions options() {
    if (options == null) {
      options = new MemoryConfigurationOptions(this);
    }

    return options;
  }
}
